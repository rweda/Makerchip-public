//_\TLV_version 1c: tl-x.org, generated by SandPiper(TM)

/*
Copyright (c) 2018, Steve Hoover
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
module top(input logic clk, input logic reset, input logic [15:0] cyc_cnt, output logic passed, output logic failed);    /* verilator lint_off UNOPTFLAT */  bit [256:0] RW_rand_raw; bit [256+63:0] RW_rand_vect; pseudo_rand #(.WIDTH(257)) pseudo_rand (clk, reset, RW_rand_raw[256:0]); assign RW_rand_vect[256+63:0] = {RW_rand_raw[62:0], RW_rand_raw};  /* verilator lint_on UNOPTFLAT */
//m4_makerchip_module()
/* verilator lint_off UNOPTFLAT */  // Probably want to make this a default in Makerchip. See what happens when uprev'ed to 1d.


parameter RING_STOPS = 4;

parameter RING_STOPS_WIDTH = 2;  //$clog2(RING_STOPS); // roundup(log2(RING_STOPS))

parameter PACKET_SIZE = 16;

`include "flow_gen.sv"

   // testbench
   //_>tb
      //_|count
         //_@0
            assign Tb_COUNT_CycCount_n1[15:0] = DEFAULT_reset_a1 ? 16'b0 :
                                                           Tb_COUNT_CycCount_a0 + 1;
            /*SV_plus*/
               always_ff @(posedge clk) begin
                  $display("Cycle: %0d", Tb_COUNT_CycCount_a0);
               end
      for (ring_stop = 0; ring_stop <= RING_STOPS-1; ring_stop++) begin : L1_Tb_RingStop logic L1_RECEIVE_received_a0; logic L1_RECEIVE_request_a0; logic L1_RECEIVE_reset_a0; logic L1_RECEIVE_trans_valid_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_RECEIVE_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_RECEIVE_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_RECEIVE_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_RECEIVE_Trans_sender_a0; logic L1_SEND_trans_valid_a0; logic L1_SEND_trans_valid_a1; logic L1_SEND_valid_in_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_SEND_GenTrans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_SEND_GenTrans_dest_a0; logic [2-1:0] w_L1_SEND_GenTrans_dest_tmp_a0; logic [2-1:0] L1_SEND_GenTrans_dest_tmp_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_SEND_GenTrans_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_SEND_GenTrans_sender_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_SEND_TransOut_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_SEND_TransOut_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_SEND_TransOut_dest_a1; logic [RING_STOPS_WIDTH-1:0] w_L1_SEND_TransOut_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_SEND_TransOut_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_SEND_TransOut_sender_a1; //_>ring_stop
         // STIMULUS
         //_|send
            //_@0
               assign L1_SEND_valid_in_a0 = Tb_COUNT_CycCount_a0 == 3;
               //_?$valid_in
                  //_>gen_trans
                     assign w_L1_SEND_GenTrans_sender_a0[RING_STOPS_WIDTH-1:0] = ring_stop;
                     //m4_rand($size, M4_PACKET_SIZE-1, 0, ring_stop) // unused
                     assign w_L1_SEND_GenTrans_dest_tmp_a0[2-1:0] = RW_rand_vect[(0 + (ring_stop)) % 257 +: 2];
                     /* verilator lint_off WIDTH */
                     assign w_L1_SEND_GenTrans_dest_a0[RING_STOPS_WIDTH-1:0] = (L1_SEND_GenTrans_dest_tmp_a0 + RING_STOPS) % RING_STOPS;
                     /* verilator lint_on WIDTH */
                     //$dest[RING_STOPS_WIDTH-1:0] = ring_stop;
                     //$packet_valid = ring_stop == 0 ? 1'b1 : 1'b0; // valid for only first ring_stop - unused
               assign L1_SEND_trans_valid_a0 = L1_SEND_valid_in_a0 || L1_RECEIVE_request_a0;
               //_?$trans_valid
                  //_>trans_out
                     assign {w_L1_SEND_TransOut_dest_a0[RING_STOPS_WIDTH-1:0], w_L1_SEND_TransOut_sender_a0[RING_STOPS_WIDTH-1:0]} = L1_RECEIVE_request_a0 ? {L1_RECEIVE_Trans_dest_a0, L1_RECEIVE_Trans_sender_a0} :
                                                           {L1_SEND_GenTrans_dest_a0, L1_SEND_GenTrans_sender_a0};
                     
                     /*SV_plus*/
                        always_ff @(posedge clk) begin
                           $display("|send[%0d]", ring_stop);
                           $display("Sender: %0d, Destination: %0d", L1_SEND_TransOut_sender_a0, L1_SEND_TransOut_dest_a0);
                        end
                     
         //_|receive
            //_@0
               assign L1_RECEIVE_reset_a0 = DEFAULT_reset_a1;
               assign L1_RECEIVE_trans_valid_a0 = L1c_RingStop[ring_stop].L1_Pipe2_FIFO2_OUT_trans_valid_a1;
               assign L1_RECEIVE_request_a0 = L1_RECEIVE_trans_valid_a0 && L1_RECEIVE_Trans_sender_a0 != ring_stop;
               assign L1_RECEIVE_received_a0 = L1_RECEIVE_trans_valid_a0 && L1_RECEIVE_Trans_sender_a0 == ring_stop;
               assign Tb_RingStop_RECEIVE_NumPackets_n1[ring_stop][PACKET_SIZE-1:0] = L1_RECEIVE_reset_a0                      ? '0 :
                                                   L1_SEND_valid_in_a0 ? Tb_RingStop_RECEIVE_NumPackets_a0[ring_stop] + 1 :
                                                   L1_RECEIVE_request_a0                    ? Tb_RingStop_RECEIVE_NumPackets_a0[ring_stop] :
                                                   L1_RECEIVE_received_a0                   ? Tb_RingStop_RECEIVE_NumPackets_a0[ring_stop] - 1 :
                                                                                 Tb_RingStop_RECEIVE_NumPackets_a0[ring_stop];
               //_?$trans_valid
                  //_>trans
                     assign {w_L1_RECEIVE_Trans_sender_a0[RING_STOPS_WIDTH-1:0]} = {L1c_RingStop[ring_stop].L1_Pipe2_FIFO2_OUT_Trans_sender_a1};
                     assign w_L1_RECEIVE_Trans_dest_a0[RING_STOPS_WIDTH-1:0] = L1_RECEIVE_request_a0 ? L1_RECEIVE_Trans_sender_a0 : L1_RECEIVE_Trans_dest_a0; end
      //_|pass
         //_@0
            assign Tb_PASS_reset_a0 = DEFAULT_reset_a1;
            assign Tb_PASS_packets_a0[RING_STOPS*PACKET_SIZE-1:0] = Tb_RingStop_RECEIVE_NumPackets_a0;
            assign passed = !Tb_PASS_reset_a0 && (Tb_PASS_packets_a0 == '0) && (Tb_COUNT_CycCount_a0 > 3);
   
   // Reset as a pipesignal.
   //_|default
      //_@0
         assign DEFAULT_reset_a0 = reset;

   // Ring
   for (ring_stop = 0; ring_stop <= RING_STOPS-1; ring_stop++) begin : L1_RingStop logic [RING_STOPS_WIDTH-1:0] w_L1_RING_IN_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_RING_IN_dest_a0; logic L1_RING_IN_reset_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_RING_IN_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_RING_IN_sender_a1; logic L1_RING_IN_trans_avail_a0; logic L1_RING_IN_trans_valid_a0; //_>ring_stop
      //_|ring_in
         //_@0
            assign L1_RING_IN_reset_a0 = DEFAULT_reset_a1;
            // transaction available if not reset and FIFO has valid transaction
            // and packet's destination is not the same as ring_stop
            assign L1_RING_IN_trans_avail_a0 = ! L1_RING_IN_reset_a0 && L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_trans_valid_a1 &&
                           L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_Trans_dest_a1 != ring_stop;
            assign L1_RING_IN_trans_valid_a0 = L1_RING_IN_trans_avail_a0 && ! L1b_RingStop[ring_stop].L1_RING_IN_blocked_a0;
            //_?$trans_valid
               assign {w_L1_RING_IN_dest_a0[RING_STOPS_WIDTH-1:0], w_L1_RING_IN_sender_a0[RING_STOPS_WIDTH-1:0]} = {L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_Trans_dest_a1, L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_Trans_sender_a1}; end
   //            (  hop,    in_pipe, in_stage, out_pipe, out_stage, reset_scope,  reset_stage, reset_sig)
   //_\source ./m4/1c/pipeflow_tlv.m4 995   // Instantiated from stdin, 121 as: m4+simple_ring(ring_stop, ring_in,    0,     ring_out,     0,     >top|default,      1,       $reset  )
   
      // Logic
      for (ring_stop = 0; ring_stop <= RING_STOPS-1; ring_stop++) begin : L1b_RingStop logic L1_RG_passed_on_a0; logic L1_RG_passed_on_a1; logic L1_RG_valid_a0; logic L1_RG_valid_a1; logic L1_RING_IN_blocked_a0; logic L1_RING_OUT_blocked_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_RING_OUT_dest_a1; logic [RING_STOPS_WIDTH-1:0] L1_RING_OUT_dest_a1; logic [RING_STOPS_WIDTH-1:0] w_L1_RING_OUT_sender_a1; logic [RING_STOPS_WIDTH-1:0] L1_RING_OUT_sender_a1; logic L1_RING_OUT_trans_avail_a0; logic L1_RING_OUT_trans_valid_a0; logic L1_RING_OUT_trans_valid_a1; //_>ring_stop
         //_|default
            //_@0
               /*SV_plus*/
                  int prev_hop = (ring_stop + RING_STOPS - 1) % RING_STOPS;
         //_|ring_in
            //_@0
               assign L1_RING_IN_blocked_a0 = L1_RG_passed_on_a0;
         //_|rg
            //_@0
               assign L1_RG_passed_on_a0 = RingStop_RG_pass_on_a1[prev_hop];
               assign L1_RG_valid_a0 = ! DEFAULT_reset_a1   &&
                        (L1_RG_passed_on_a0 || L1_RingStop[ring_stop].L1_RING_IN_trans_avail_a0);
               assign RingStop_RG_pass_on_a0[ring_stop] = L1_RG_valid_a0 && ! L1_RING_OUT_trans_valid_a0;
               assign RingStop_RG_dest_a0[ring_stop][RING_STOPS_WIDTH-1:0] =
                  L1_RG_passed_on_a0
                     ? RingStop_RG_dest_a1[prev_hop]
                     : L1_RingStop[ring_stop].L1_RING_IN_dest_a0;
            //_@1
               //_?$valid
                  assign {w_RingStop_RG_sender_a1[ring_stop][RING_STOPS_WIDTH-1:0]} =
                     L1_RG_passed_on_a1
                        ? {RingStop_RG_sender_a2[prev_hop]}
                        : {L1_RingStop[ring_stop].L1_RING_IN_sender_a1};
         //_|ring_out
            // Ring out
            //_@0
               assign L1_RING_OUT_trans_avail_a0 = L1_RG_valid_a0 && (RingStop_RG_dest_a0[ring_stop] == ring_stop);
               assign L1_RING_OUT_blocked_a0 = 1'b0;
               assign L1_RING_OUT_trans_valid_a0 = L1_RING_OUT_trans_avail_a0 && ! L1_RING_OUT_blocked_a0;
            //_?$trans_valid
               //_@1
                  assign {w_L1_RING_OUT_dest_a1[RING_STOPS_WIDTH-1:0], w_L1_RING_OUT_sender_a1[RING_STOPS_WIDTH-1:0]} = {RingStop_RG_dest_a1[ring_stop], RingStop_RG_sender_a1[ring_stop]}; end
   //_\end_source
   
   for (ring_stop = 0; ring_stop <= RING_STOPS-1; ring_stop++) begin : L1c_RingStop logic L1_Pipe2_FIFO2_OUT_blocked_a0; logic L1_Pipe2_FIFO2_OUT_trans_avail_a0; logic L1_Pipe2_FIFO2_OUT_trans_valid_a0; logic L1_Pipe2_FIFO2_OUT_trans_valid_a1; logic [RING_STOPS_WIDTH-1:0] L1_Pipe2_FIFO2_OUT_Entry_Accum_Trans_dest_a0 [(4)-1:0]; logic [RING_STOPS_WIDTH-1:0] L1_Pipe2_FIFO2_OUT_Entry_Accum_Trans_sender_a0 [(4)-1:0]; logic L1_Pipe2_FIFO2_OUT_FifoHead_trans_avail_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_Pipe2_FIFO2_OUT_FifoHead_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_Pipe2_FIFO2_OUT_FifoHead_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_Pipe2_FIFO2_OUT_FifoHead_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_Pipe2_FIFO2_OUT_FifoHead_Trans_sender_a0; logic L1_Pipe2_FIFO2_OUT_Head_trans_avail_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_Pipe2_FIFO2_OUT_Head_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_Pipe2_FIFO2_OUT_Head_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_Pipe2_FIFO2_OUT_Head_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_Pipe2_FIFO2_OUT_Head_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_Pipe2_FIFO2_OUT_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_Pipe2_FIFO2_OUT_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_Pipe2_FIFO2_OUT_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_Pipe2_FIFO2_OUT_Trans_sender_a1; logic L1_Pipe2_PIPE2_blocked_a0; logic L1_Pipe2_PIPE2_bypass_a0; logic L1_Pipe2_PIPE2_empty_a1; logic L1_Pipe2_PIPE2_full_a1; logic L1_Pipe2_PIPE2_grow_a0; logic L1_Pipe2_PIPE2_out_blocked_a0; logic L1_Pipe2_PIPE2_push_a0; logic L1_Pipe2_PIPE2_reset_a0; logic L1_Pipe2_PIPE2_shrink_a0; logic L1_Pipe2_PIPE2_trans_avail_a0; logic L1_Pipe2_PIPE2_trans_valid_a0; logic L1_Pipe2_PIPE2_two_valid_a0; logic L1_Pipe2_PIPE2_two_valid_a1; logic [$clog2((4)+1)-1:0] L1_Pipe2_PIPE2_valid_count_a0; logic [$clog2((4)+1)-1:0] L1_Pipe2_PIPE2_valid_count_a1; logic L1_Pipe2_PIPE2_would_bypass_a0; logic [(4)-1:0] L1_Pipe2_PIPE2_Entry_prev_entry_was_tail_a0; logic [(4)-1:0] L1_Pipe2_PIPE2_Entry_push_a0; logic [(4)-1:0] L1_Pipe2_PIPE2_Entry_reconstructed_is_tail_a1; logic L1_Pipe2_PIPE2_Entry_state_a0 [(4)-1:0]; logic L1_Pipe2_PIPE2_Entry_state_a1 [(4)-1:0]; logic [RING_STOPS_WIDTH-1:0] w_L1_Pipe2_PIPE2_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_Pipe2_PIPE2_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_Pipe2_PIPE2_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_Pipe2_PIPE2_Trans_sender_a0; logic L1_StallPipe_FIFO_OUT_blocked_a0; logic L1_StallPipe_FIFO_OUT_trans_avail_a0; logic L1_StallPipe_FIFO_OUT_trans_valid_a0; logic L1_StallPipe_FIFO_OUT_trans_valid_a1; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_FIFO_OUT_Entry_Accum_Trans_dest_a0 [(4)-1:0]; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_FIFO_OUT_Entry_Accum_Trans_sender_a0 [(4)-1:0]; logic L1_StallPipe_FIFO_OUT_FifoHead_trans_avail_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_FIFO_OUT_FifoHead_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_FIFO_OUT_FifoHead_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_FIFO_OUT_FifoHead_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_FIFO_OUT_FifoHead_Trans_sender_a0; logic L1_StallPipe_FIFO_OUT_Head_trans_avail_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_FIFO_OUT_Head_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_FIFO_OUT_Head_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_FIFO_OUT_Head_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_FIFO_OUT_Head_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_FIFO_OUT_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_FIFO_OUT_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_FIFO_OUT_Trans_dest_a1; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_FIFO_OUT_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_FIFO_OUT_Trans_sender_a1; logic L1_StallPipe_STALL0_blocked_a0; logic L1_StallPipe_STALL0_reset_a0; logic L1_StallPipe_STALL0_trans_avail_a0; logic L1_StallPipe_STALL0_trans_avail_a1; logic L1_StallPipe_STALL0_trans_valid_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_STALL0_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL0_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL0_Trans_dest_a1; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_STALL0_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL0_Trans_sender_a1; logic L1_StallPipe_STALL1_blocked_a0; logic L1_StallPipe_STALL1_trans_avail_a0; logic L1_StallPipe_STALL1_trans_avail_a1; logic L1_StallPipe_STALL1_trans_valid_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_STALL1_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL1_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL1_Trans_dest_a1; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_STALL1_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL1_Trans_sender_a1; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_STALL1_TransHold_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL1_TransHold_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL1_TransHold_dest_a1; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_STALL1_TransHold_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL1_TransHold_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL1_TransHold_sender_a1; logic L1_StallPipe_STALL2_blocked_a0; logic L1_StallPipe_STALL2_trans_avail_a0; logic L1_StallPipe_STALL2_trans_avail_a1; logic L1_StallPipe_STALL2_trans_valid_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_STALL2_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL2_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL2_Trans_dest_a1; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_STALL2_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL2_Trans_sender_a1; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_STALL2_TransHold_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL2_TransHold_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL2_TransHold_dest_a1; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_STALL2_TransHold_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL2_TransHold_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL2_TransHold_sender_a1; logic L1_StallPipe_STALL3_blocked_a0; logic L1_StallPipe_STALL3_bypass_a0; logic L1_StallPipe_STALL3_empty_a1; logic L1_StallPipe_STALL3_full_a1; logic L1_StallPipe_STALL3_grow_a0; logic L1_StallPipe_STALL3_out_blocked_a0; logic L1_StallPipe_STALL3_push_a0; logic L1_StallPipe_STALL3_reset_a0; logic L1_StallPipe_STALL3_shrink_a0; logic L1_StallPipe_STALL3_trans_avail_a0; logic L1_StallPipe_STALL3_trans_avail_a1; logic L1_StallPipe_STALL3_trans_valid_a0; logic L1_StallPipe_STALL3_two_valid_a0; logic L1_StallPipe_STALL3_two_valid_a1; logic [$clog2((4)+1)-1:0] L1_StallPipe_STALL3_valid_count_a0; logic [$clog2((4)+1)-1:0] L1_StallPipe_STALL3_valid_count_a1; logic L1_StallPipe_STALL3_would_bypass_a0; logic [(4)-1:0] L1_StallPipe_STALL3_Entry_prev_entry_was_tail_a0; logic [(4)-1:0] L1_StallPipe_STALL3_Entry_push_a0; logic [(4)-1:0] L1_StallPipe_STALL3_Entry_reconstructed_is_tail_a1; logic L1_StallPipe_STALL3_Entry_state_a0 [(4)-1:0]; logic L1_StallPipe_STALL3_Entry_state_a1 [(4)-1:0]; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_STALL3_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL3_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_STALL3_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL3_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_STALL3_TransHold_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL3_TransHold_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL3_TransHold_dest_a1; logic [RING_STOPS_WIDTH-1:0] w_L1_StallPipe_STALL3_TransHold_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL3_TransHold_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_StallPipe_STALL3_TransHold_sender_a1; logic L1_ARB_OUT_bypass_a0; logic L1_ARB_OUT_trans_valid_a0; logic L1_ARB_OUT_trans_valid_a1; logic [RING_STOPS_WIDTH-1:0] w_L1_ARB_OUT_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_ARB_OUT_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_ARB_OUT_Trans_dest_a1; logic [RING_STOPS_WIDTH-1:0] w_L1_ARB_OUT_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_ARB_OUT_Trans_sender_a1; logic L1_PIPE1_trans_valid_a0; logic L1_PIPE1_trans_valid_a1; logic [RING_STOPS_WIDTH-1:0] w_L1_PIPE1_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_PIPE1_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L1_PIPE1_Trans_dest_a1; logic [RING_STOPS_WIDTH-1:0] w_L1_PIPE1_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] L1_PIPE1_Trans_sender_a1; //_>ring_stop
      // Stall Pipeline
      //_>stall_pipe
         //_|stall0
            //_@0
               assign L1_StallPipe_STALL0_reset_a0 = DEFAULT_reset_a1;
               assign L1_StallPipe_STALL0_trans_avail_a0 = ! L1_StallPipe_STALL0_reset_a0 && L1_Tb_RingStop[ring_stop].L1_SEND_trans_valid_a1;
               assign L1_StallPipe_STALL0_trans_valid_a0 = L1_StallPipe_STALL0_trans_avail_a0 && ! L1_StallPipe_STALL0_blocked_a0;
               //_?$trans_valid
                  //_>trans
                     assign {w_L1_StallPipe_STALL0_Trans_dest_a0[RING_STOPS_WIDTH-1:0], w_L1_StallPipe_STALL0_Trans_sender_a0[RING_STOPS_WIDTH-1:0]} = {L1_Tb_RingStop[ring_stop].L1_SEND_TransOut_dest_a1, L1_Tb_RingStop[ring_stop].L1_SEND_TransOut_sender_a1};
         //_|stall3
            //_@0
               assign L1_StallPipe_STALL3_reset_a0 = DEFAULT_reset_a1;
      
      // The input transaction.
      //_>stall_pipe
         //               (   top,     name,  first_cycle, last_cycle)
         //_\source ./m4/1c/pipeflow_tlv.m4 328   // Instantiated from stdin, 141 as: m4+stall_pipeline(stall_pipe, stall,      0,          3     )         
            //_\source ./m4/1c/pipeflow_tlv.m4 270   // Instantiated from ./m4/1c/pipeflow_tlv.m4, 330 as: m4_stall_stage(...)
               //_|stall0
                  //_@0
                     assign L1_StallPipe_STALL0_blocked_a0 = L1_StallPipe_STALL1_blocked_a0;
               //_|stall1
                  //_@0
                     assign L1_StallPipe_STALL1_trans_avail_a0 = L1_StallPipe_STALL1_blocked_a0 ? L1_StallPipe_STALL1_trans_avail_a1 : L1_StallPipe_STALL0_trans_avail_a1;
                     assign L1_StallPipe_STALL1_trans_valid_a0 = L1_StallPipe_STALL1_trans_avail_a0 && !L1_StallPipe_STALL1_blocked_a0;
                     //_?$trans_valid
                        //_>trans_hold
                           assign {w_L1_StallPipe_STALL1_TransHold_dest_a0[RING_STOPS_WIDTH-1:0], w_L1_StallPipe_STALL1_TransHold_sender_a0[RING_STOPS_WIDTH-1:0]} = L1_StallPipe_STALL1_blocked_a0 ? {L1_StallPipe_STALL1_TransHold_dest_a1, L1_StallPipe_STALL1_TransHold_sender_a1} : {L1_StallPipe_STALL0_Trans_dest_a1, L1_StallPipe_STALL0_Trans_sender_a1};
                     //_?$trans_avail
                        //_>trans
                           assign {w_L1_StallPipe_STALL1_Trans_dest_a0[RING_STOPS_WIDTH-1:0], w_L1_StallPipe_STALL1_Trans_sender_a0[RING_STOPS_WIDTH-1:0]} = {L1_StallPipe_STALL1_TransHold_dest_a0, L1_StallPipe_STALL1_TransHold_sender_a0};
            //_\end_source
            //_\source ./m4/1c/pipeflow_tlv.m4 270   // Instantiated from ./m4/1c/pipeflow_tlv.m4, 330 as: m4_stall_stage(...)
               //_|stall1
                  //_@0
                     assign L1_StallPipe_STALL1_blocked_a0 = L1_StallPipe_STALL2_blocked_a0;
               //_|stall2
                  //_@0
                     assign L1_StallPipe_STALL2_trans_avail_a0 = L1_StallPipe_STALL2_blocked_a0 ? L1_StallPipe_STALL2_trans_avail_a1 : L1_StallPipe_STALL1_trans_avail_a1;
                     assign L1_StallPipe_STALL2_trans_valid_a0 = L1_StallPipe_STALL2_trans_avail_a0 && !L1_StallPipe_STALL2_blocked_a0;
                     //_?$trans_valid
                        //_>trans_hold
                           assign {w_L1_StallPipe_STALL2_TransHold_dest_a0[RING_STOPS_WIDTH-1:0], w_L1_StallPipe_STALL2_TransHold_sender_a0[RING_STOPS_WIDTH-1:0]} = L1_StallPipe_STALL2_blocked_a0 ? {L1_StallPipe_STALL2_TransHold_dest_a1, L1_StallPipe_STALL2_TransHold_sender_a1} : {L1_StallPipe_STALL1_Trans_dest_a1, L1_StallPipe_STALL1_Trans_sender_a1};
                     //_?$trans_avail
                        //_>trans
                           assign {w_L1_StallPipe_STALL2_Trans_dest_a0[RING_STOPS_WIDTH-1:0], w_L1_StallPipe_STALL2_Trans_sender_a0[RING_STOPS_WIDTH-1:0]} = {L1_StallPipe_STALL2_TransHold_dest_a0, L1_StallPipe_STALL2_TransHold_sender_a0};
            //_\end_source
            //_\source ./m4/1c/pipeflow_tlv.m4 270   // Instantiated from ./m4/1c/pipeflow_tlv.m4, 330 as: m4_stall_stage(...)
               //_|stall2
                  //_@0
                     assign L1_StallPipe_STALL2_blocked_a0 = L1_StallPipe_STALL3_blocked_a0;
               //_|stall3
                  //_@0
                     assign L1_StallPipe_STALL3_trans_avail_a0 = L1_StallPipe_STALL3_blocked_a0 ? L1_StallPipe_STALL3_trans_avail_a1 : L1_StallPipe_STALL2_trans_avail_a1;
                     assign L1_StallPipe_STALL3_trans_valid_a0 = L1_StallPipe_STALL3_trans_avail_a0 && !L1_StallPipe_STALL3_blocked_a0;
                     //_?$trans_valid
                        //_>trans_hold
                           assign {w_L1_StallPipe_STALL3_TransHold_dest_a0[RING_STOPS_WIDTH-1:0], w_L1_StallPipe_STALL3_TransHold_sender_a0[RING_STOPS_WIDTH-1:0]} = L1_StallPipe_STALL3_blocked_a0 ? {L1_StallPipe_STALL3_TransHold_dest_a1, L1_StallPipe_STALL3_TransHold_sender_a1} : {L1_StallPipe_STALL2_Trans_dest_a1, L1_StallPipe_STALL2_Trans_sender_a1};
                     //_?$trans_avail
                        //_>trans
                           assign {w_L1_StallPipe_STALL3_Trans_dest_a0[RING_STOPS_WIDTH-1:0], w_L1_StallPipe_STALL3_Trans_sender_a0[RING_STOPS_WIDTH-1:0]} = {L1_StallPipe_STALL3_TransHold_dest_a0, L1_StallPipe_STALL3_TransHold_sender_a0};
            //_\end_source
         //_\end_source
         
         // FIFO
         //             (   top,     in_pipe, in_stage, out_pipe, out_stage, depth, trans_hier)
         //_\source ./m4/1c/pipeflow_tlv.m4 550   // Instantiated from stdin, 145 as: m4+flop_fifo_v2(stall_pipe, stall3,     0,     fifo_out,    0,        4,     >trans)
            //|default
            //   @0
            /*SV_plus*/
               localparam bit [$clog2((4)+1)-1:0] full_mark_6 = 4 - 0;
         
            // FIFO Instantiation
         
            // Hierarchy declarations
            //_|stall3
               //_>entry
            //_|fifo_out
               //_>entry
         
            // Hierarchy
            //_|stall3
               //_@0
                  assign L1_StallPipe_STALL3_out_blocked_a0 = L1_StallPipe_FIFO_OUT_blocked_a0;
                  assign L1_StallPipe_STALL3_blocked_a0 = L1_StallPipe_STALL3_full_a1 && L1_StallPipe_STALL3_out_blocked_a0;
                  `BOGUS_USE(L1_StallPipe_STALL3_blocked_a0)   // Not required to be consumed elsewhere.
                  assign L1_StallPipe_STALL3_would_bypass_a0 = L1_StallPipe_STALL3_empty_a1;
                  assign L1_StallPipe_STALL3_bypass_a0 = L1_StallPipe_STALL3_would_bypass_a0 && ! L1_StallPipe_STALL3_out_blocked_a0;
                  assign L1_StallPipe_STALL3_push_a0 = L1_StallPipe_STALL3_trans_valid_a0 && ! L1_StallPipe_STALL3_bypass_a0;
                  assign L1_StallPipe_STALL3_grow_a0   =   L1_StallPipe_STALL3_trans_valid_a0 &&   L1_StallPipe_STALL3_out_blocked_a0;
                  assign L1_StallPipe_STALL3_shrink_a0 = ! L1_StallPipe_STALL3_trans_avail_a0 && ! L1_StallPipe_STALL3_out_blocked_a0 && ! L1_StallPipe_STALL3_empty_a1;
                  assign L1_StallPipe_STALL3_valid_count_a0[$clog2((4)+1)-1:0] = L1_StallPipe_STALL3_reset_a0 ? '0
                                                              : L1_StallPipe_STALL3_valid_count_a1 + (
                                                                   L1_StallPipe_STALL3_grow_a0   ? { {($clog2((4)+1)-1){1'b0}}, 1'b1} :
                                                                   L1_StallPipe_STALL3_shrink_a0 ? '1
                                                                           : '0
                                                                );
                  // At least 2 valid entries.
                  //$two_valid = | $ValidCount[m4_counter_width-1:1];
                  // but logic depth minimized by taking advantage of prev count >= 4.
                  assign L1_StallPipe_STALL3_two_valid_a0 = | L1_StallPipe_STALL3_valid_count_a1[$clog2((4)+1)-1:2] || | L1_StallPipe_STALL3_valid_count_a0[2:1];
                  // These are an optimization of the commented block below to operate on vectors, rather than bits.
                  // TODO: Keep optimizing...
                  assign {L1_StallPipe_STALL3_Entry_prev_entry_was_tail_a0} = {L1_StallPipe_STALL3_Entry_reconstructed_is_tail_a1[2:0], L1_StallPipe_STALL3_Entry_reconstructed_is_tail_a1[3]} /* circular << */;
                  assign {L1_StallPipe_STALL3_Entry_push_a0} = {4{L1_StallPipe_STALL3_push_a0}} & L1_StallPipe_STALL3_Entry_prev_entry_was_tail_a0;
                  for (entry = 0; entry <= (4)-1; entry++) begin : L2b_StallPipe_STALL3_Entry logic L2_is_tail_a0; logic L2_valid_a0; //_>entry
                     // Replaced with optimized versions above:
                     // $prev_entry_was_tail = >entry[(entry+(m4_depth)-1)%(m4_depth)]%+1$reconstructed_is_tail;
                     // $push = |m4_in_pipe$push && $prev_entry_was_tail;
                     assign L2_valid_a0 = (L2c_StallPipe_STALL3_Entry[entry].L2_reconstructed_valid_a1 && ! L2b_StallPipe_FIFO_OUT_Entry[entry].L2_pop_a0) || L1_StallPipe_STALL3_Entry_push_a0[entry];
                     assign L2_is_tail_a0 = L1_StallPipe_STALL3_trans_valid_a0 ? L1_StallPipe_STALL3_Entry_prev_entry_was_tail_a0[entry]  // shift tail
                                                        : L1_StallPipe_STALL3_Entry_reconstructed_is_tail_a1[entry];  // retain tail
                     assign L1_StallPipe_STALL3_Entry_state_a0[entry] = L1_StallPipe_STALL3_reset_a0 ? 1'b0
                                                : L2_valid_a0 && ! (L1_StallPipe_STALL3_two_valid_a0 && L2_is_tail_a0); end
               //_@1
                  assign L1_StallPipe_STALL3_empty_a1 = ! L1_StallPipe_STALL3_two_valid_a1 && ! L1_StallPipe_STALL3_valid_count_a1[0];
                  assign L1_StallPipe_STALL3_full_a1 = (L1_StallPipe_STALL3_valid_count_a1 == full_mark_6);  // Could optimize for power-of-two depth.
               for (entry = 0; entry <= (4)-1; entry++) begin : L2c_StallPipe_STALL3_Entry logic L2_is_head_a1; logic L2_next_entry_state_a1; logic L2_prev_entry_state_a1; logic L2_reconstructed_valid_a1; //_>entry
                  //_@1
                     assign L2_prev_entry_state_a1 = L1_StallPipe_STALL3_Entry_state_a1[(entry+(4)-1)%(4)];
                     assign L2_next_entry_state_a1 = L1_StallPipe_STALL3_Entry_state_a1[(entry+1)%(4)];
                     assign L1_StallPipe_STALL3_Entry_reconstructed_is_tail_a1[entry] = (  L1_StallPipe_STALL3_two_valid_a1 && (!L1_StallPipe_STALL3_Entry_state_a1[entry] && L2_prev_entry_state_a1)) ||
                                              (! L1_StallPipe_STALL3_two_valid_a1 && (!L2_next_entry_state_a1 && L1_StallPipe_STALL3_Entry_state_a1[entry])) ||
                                              (L1_StallPipe_STALL3_empty_a1 && (entry == 0));  // need a tail when empty for push
                     assign L2_is_head_a1 = L1_StallPipe_STALL3_Entry_state_a1[entry] && ! L2_prev_entry_state_a1;
                     assign L2_reconstructed_valid_a1 = L1_StallPipe_STALL3_Entry_state_a1[entry] || (L1_StallPipe_STALL3_two_valid_a1 && L2_prev_entry_state_a1); end
            // Write data
            //_|stall3
               //_@0
                  for (entry = 0; entry <= (4)-1; entry++) begin : L2d_StallPipe_STALL3_Entry logic [RING_STOPS_WIDTH-1:0] L2_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L2_Trans_dest_a1; logic [RING_STOPS_WIDTH-1:0] L2_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] L2_Trans_sender_a1; //_>entry
                     //?$push
                     //   $aNY = |m4_in_pipe['']m4_trans_hier$ANY;
                     //_>trans
                        assign {L2_Trans_dest_a0[RING_STOPS_WIDTH-1:0], L2_Trans_sender_a0[RING_STOPS_WIDTH-1:0]} = L1_StallPipe_STALL3_Entry_push_a0[entry] ? {L1_StallPipe_STALL3_Trans_dest_a0, L1_StallPipe_STALL3_Trans_sender_a0} : {L2_Trans_dest_a1, L2_Trans_sender_a1} /* RETAIN */; end
            // Read data
            //_|fifo_out
               //_@0
                  //$pop  = ! >m4_top|m4_in_pipe%m4_align(m4_in_at + 1, m4_out_at)$empty && ! $blocked;
                  for (entry = 0; entry <= (4)-1; entry++) begin : L2b_StallPipe_FIFO_OUT_Entry logic L2_is_head_a0; logic L2_pop_a0; logic [RING_STOPS_WIDTH-1:0] L2_ReadMasked_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L2_ReadMasked_Trans_sender_a0; //_>entry
                     assign L2_is_head_a0 = L2c_StallPipe_STALL3_Entry[entry].L2_is_head_a1;
                     assign L2_pop_a0  = L2_is_head_a0 && ! L1_StallPipe_FIFO_OUT_blocked_a0;
                     //_>read_masked
                        //_>trans
                           assign {L2_ReadMasked_Trans_dest_a0[RING_STOPS_WIDTH-1:0], L2_ReadMasked_Trans_sender_a0[RING_STOPS_WIDTH-1:0]} = L2_is_head_a0 ? {L2d_StallPipe_STALL3_Entry[entry].L2_Trans_dest_a1, L2d_StallPipe_STALL3_Entry[entry].L2_Trans_sender_a1} /* $aNY */ : '0;
                     //_>accum
                        //_>trans
                           assign {L1_StallPipe_FIFO_OUT_Entry_Accum_Trans_dest_a0[entry][RING_STOPS_WIDTH-1:0], L1_StallPipe_FIFO_OUT_Entry_Accum_Trans_sender_a0[entry][RING_STOPS_WIDTH-1:0]} = ((entry == 0) ? '0 : {L1_StallPipe_FIFO_OUT_Entry_Accum_Trans_dest_a0[(entry+(4)-1)%(4)], L1_StallPipe_FIFO_OUT_Entry_Accum_Trans_sender_a0[(entry+(4)-1)%(4)]}) |
                                  {L2_ReadMasked_Trans_dest_a0, L2_ReadMasked_Trans_sender_a0}; end
                  //_>head
                     assign L1_StallPipe_FIFO_OUT_Head_trans_avail_a0 = L1_StallPipe_FIFO_OUT_trans_avail_a0;
                     //_?$trans_avail
                        //_>trans
                           assign {w_L1_StallPipe_FIFO_OUT_Head_Trans_dest_a0[RING_STOPS_WIDTH-1:0], w_L1_StallPipe_FIFO_OUT_Head_Trans_sender_a0[RING_STOPS_WIDTH-1:0]} = {L1_StallPipe_FIFO_OUT_Entry_Accum_Trans_dest_a0[(4)-1], L1_StallPipe_FIFO_OUT_Entry_Accum_Trans_sender_a0[(4)-1]};
         
            // Bypass
            //_|fifo_out
               //_@0
                  // Available output.  Sometimes it's necessary to know what would be coming to determined
                  // if it's blocked.  This can be used externally in that case.
                  //_>fifo_head
                     assign L1_StallPipe_FIFO_OUT_FifoHead_trans_avail_a0 = L1_StallPipe_FIFO_OUT_trans_avail_a0;
                     //_?$trans_avail
                        //_>trans
                           assign {w_L1_StallPipe_FIFO_OUT_FifoHead_Trans_dest_a0[RING_STOPS_WIDTH-1:0], w_L1_StallPipe_FIFO_OUT_FifoHead_Trans_sender_a0[RING_STOPS_WIDTH-1:0]} = L1_StallPipe_STALL3_would_bypass_a0
                                        ? {L1_StallPipe_STALL3_Trans_dest_a0, L1_StallPipe_STALL3_Trans_sender_a0}
                                        : {L1_StallPipe_FIFO_OUT_Head_Trans_dest_a0, L1_StallPipe_FIFO_OUT_Head_Trans_sender_a0};
                  assign L1_StallPipe_FIFO_OUT_trans_avail_a0 = ! L1_StallPipe_STALL3_would_bypass_a0 || L1_StallPipe_STALL3_trans_avail_a0;
                  assign L1_StallPipe_FIFO_OUT_trans_valid_a0 = L1_StallPipe_FIFO_OUT_trans_avail_a0 && ! L1_StallPipe_FIFO_OUT_blocked_a0;
                  //_?$trans_valid
                     //_>trans
                        assign {w_L1_StallPipe_FIFO_OUT_Trans_dest_a0[RING_STOPS_WIDTH-1:0], w_L1_StallPipe_FIFO_OUT_Trans_sender_a0[RING_STOPS_WIDTH-1:0]} = {L1_StallPipe_FIFO_OUT_FifoHead_Trans_dest_a0, L1_StallPipe_FIFO_OUT_FifoHead_Trans_sender_a0};
         
         
         
            /* Alternate code for pointer indexing.  Replaces $ANY expression above.
         
            // Hierarchy
            |stall3
               >entry2[(4)-1:0]
         
            // Head/Tail ptrs.
            |stall3
               @0
                  %next$WrPtr[\$clog2(4)-1:0] =
                      $reset       ? '0 :
                      $trans_valid ? ($WrPtr == (4 - 1))
                                       ? '0
                                       : $WrPtr + {{(\$clog2(4)-1){1'b0}}, 1'b1} :
                                     $RETAIN;
            |fifo_out
               @0
                  %next$RdPtr[\$clog2(4)-1:0] =
                      >stall_pipe|stall3%+0$reset
                                   ? '0 :
                      $trans_valid ? ($RdPtr == (4 - 1))
                                       ? '0
                                       : $RdPtr + {{(\$clog2(4)-1){1'b0}}, 1'b1} :
                                     $RETAIN;
            // Write FIFO
            |stall3
               @0
                  $dummy = '0;
                  ?$trans_valid
                     // This doesn't work because SV complains for FIFOs in replicated context that
                     // there are multiple procedures that assign the signals.
                     // Array writes can be done in an SV module.
                     // The only long-term resolutions are support for module generation and use
                     // signals declared within for loops with cross-hierarchy references in SV.
                     // TODO: To make a simulation-efficient FIFO, use DesignWare.
                     {>entry2[$WrPtr]$$ANY} = $ANY;
            // Read FIFO
            |fifo_out
               @0
                  >read2
                     $trans_valid = |fifo_out$trans_valid;
                     ?$trans_valid
                        $ANY = >stall_pipe|stall3>entry2[|fifo_out$RdPtr]%+0$ANY;
                     `BOGUS_USE($dummy)
                  ?$trans_valid
                     $ANY = >read2$ANY;
            */
         //_\end_source
         //_|fifo_out
            //_@0
               // blocked if destination is same as ring_stop
               assign L1_StallPipe_FIFO_OUT_blocked_a0 = 1'b0; // >fifo_head>trans$dest == ring_stop;
      
      // Free-Flow Pipeline after Ring Out
      //_|pipe1
         //_@0
            assign L1_PIPE1_trans_valid_a0 = L1b_RingStop[ring_stop].L1_RING_OUT_trans_valid_a1;
            //_?$trans_valid
               //_>trans
                  assign {w_L1_PIPE1_Trans_dest_a0[RING_STOPS_WIDTH-1:0], w_L1_PIPE1_Trans_sender_a0[RING_STOPS_WIDTH-1:0]} = {L1b_RingStop[ring_stop].L1_RING_OUT_dest_a1, L1b_RingStop[ring_stop].L1_RING_OUT_sender_a1};
      
      // Arb
      //_|arb_out
         //_@0
            // bypass if pipe1 does not have a valid transaction and FIFO does
            // and packet's destination is same as ring_stop
            assign L1_ARB_OUT_bypass_a0 = !(L1_PIPE1_trans_valid_a1) &&
                      L1_StallPipe_FIFO_OUT_trans_valid_a1 &&
                      L1_StallPipe_FIFO_OUT_Trans_dest_a1 == ring_stop;
            assign L1_ARB_OUT_trans_valid_a0 = L1_ARB_OUT_bypass_a0 ||
                           L1_PIPE1_trans_valid_a1;
            //_?$trans_valid
               //_>trans
                  assign {w_L1_ARB_OUT_Trans_dest_a0[RING_STOPS_WIDTH-1:0], w_L1_ARB_OUT_Trans_sender_a0[RING_STOPS_WIDTH-1:0]} = L1_ARB_OUT_bypass_a0 ? {L1_StallPipe_FIFO_OUT_Trans_dest_a1, L1_StallPipe_FIFO_OUT_Trans_sender_a1} :
                                           {L1_PIPE1_Trans_dest_a1, L1_PIPE1_Trans_sender_a1};
      
      // Free-Flow Pipeline after Arb
      //_>pipe2
         //_|pipe2
            //_@0
               assign L1_Pipe2_PIPE2_reset_a0 = DEFAULT_reset_a1;
               assign L1_Pipe2_PIPE2_trans_avail_a0 = ! L1_Pipe2_PIPE2_reset_a0 && L1_ARB_OUT_trans_valid_a1;
               assign L1_Pipe2_PIPE2_trans_valid_a0 = L1_Pipe2_PIPE2_trans_avail_a0 && ! L1_Pipe2_PIPE2_blocked_a0;
               //_?$trans_valid
                  //_>trans
                     assign {w_L1_Pipe2_PIPE2_Trans_dest_a0[RING_STOPS_WIDTH-1:0], w_L1_Pipe2_PIPE2_Trans_sender_a0[RING_STOPS_WIDTH-1:0]} = {L1_ARB_OUT_Trans_dest_a1, L1_ARB_OUT_Trans_sender_a1};
         
         // FIFO2
         //             ( top,  in_pipe, in_stage, out_pipe,  out_stage, depth, trans_hier)
         //_\source ./m4/1c/pipeflow_tlv.m4 550   // Instantiated from stdin, 187 as: m4+flop_fifo_v2(pipe2, pipe2,      0,     fifo2_out,     0,       4,     >trans)
            //|default
            //   @0
            /*SV_plus*/
               localparam bit [$clog2((4)+1)-1:0] full_mark_7 = 4 - 0;
         
            // FIFO Instantiation
         
            // Hierarchy declarations
            //_|pipe2
               //_>entry
            //_|fifo2_out
               //_>entry
         
            // Hierarchy
            //_|pipe2
               //_@0
                  assign L1_Pipe2_PIPE2_out_blocked_a0 = L1_Pipe2_FIFO2_OUT_blocked_a0;
                  assign L1_Pipe2_PIPE2_blocked_a0 = L1_Pipe2_PIPE2_full_a1 && L1_Pipe2_PIPE2_out_blocked_a0;
                  `BOGUS_USE(L1_Pipe2_PIPE2_blocked_a0)   // Not required to be consumed elsewhere.
                  assign L1_Pipe2_PIPE2_would_bypass_a0 = L1_Pipe2_PIPE2_empty_a1;
                  assign L1_Pipe2_PIPE2_bypass_a0 = L1_Pipe2_PIPE2_would_bypass_a0 && ! L1_Pipe2_PIPE2_out_blocked_a0;
                  assign L1_Pipe2_PIPE2_push_a0 = L1_Pipe2_PIPE2_trans_valid_a0 && ! L1_Pipe2_PIPE2_bypass_a0;
                  assign L1_Pipe2_PIPE2_grow_a0   =   L1_Pipe2_PIPE2_trans_valid_a0 &&   L1_Pipe2_PIPE2_out_blocked_a0;
                  assign L1_Pipe2_PIPE2_shrink_a0 = ! L1_Pipe2_PIPE2_trans_avail_a0 && ! L1_Pipe2_PIPE2_out_blocked_a0 && ! L1_Pipe2_PIPE2_empty_a1;
                  assign L1_Pipe2_PIPE2_valid_count_a0[$clog2((4)+1)-1:0] = L1_Pipe2_PIPE2_reset_a0 ? '0
                                                              : L1_Pipe2_PIPE2_valid_count_a1 + (
                                                                   L1_Pipe2_PIPE2_grow_a0   ? { {($clog2((4)+1)-1){1'b0}}, 1'b1} :
                                                                   L1_Pipe2_PIPE2_shrink_a0 ? '1
                                                                           : '0
                                                                );
                  // At least 2 valid entries.
                  //$two_valid = | $ValidCount[m4_counter_width-1:1];
                  // but logic depth minimized by taking advantage of prev count >= 4.
                  assign L1_Pipe2_PIPE2_two_valid_a0 = | L1_Pipe2_PIPE2_valid_count_a1[$clog2((4)+1)-1:2] || | L1_Pipe2_PIPE2_valid_count_a0[2:1];
                  // These are an optimization of the commented block below to operate on vectors, rather than bits.
                  // TODO: Keep optimizing...
                  assign {L1_Pipe2_PIPE2_Entry_prev_entry_was_tail_a0} = {L1_Pipe2_PIPE2_Entry_reconstructed_is_tail_a1[2:0], L1_Pipe2_PIPE2_Entry_reconstructed_is_tail_a1[3]} /* circular << */;
                  assign {L1_Pipe2_PIPE2_Entry_push_a0} = {4{L1_Pipe2_PIPE2_push_a0}} & L1_Pipe2_PIPE2_Entry_prev_entry_was_tail_a0;
                  for (entry = 0; entry <= (4)-1; entry++) begin : L2b_Pipe2_PIPE2_Entry logic L2_is_tail_a0; logic L2_valid_a0; //_>entry
                     // Replaced with optimized versions above:
                     // $prev_entry_was_tail = >entry[(entry+(m4_depth)-1)%(m4_depth)]%+1$reconstructed_is_tail;
                     // $push = |m4_in_pipe$push && $prev_entry_was_tail;
                     assign L2_valid_a0 = (L2c_Pipe2_PIPE2_Entry[entry].L2_reconstructed_valid_a1 && ! L2b_Pipe2_FIFO2_OUT_Entry[entry].L2_pop_a0) || L1_Pipe2_PIPE2_Entry_push_a0[entry];
                     assign L2_is_tail_a0 = L1_Pipe2_PIPE2_trans_valid_a0 ? L1_Pipe2_PIPE2_Entry_prev_entry_was_tail_a0[entry]  // shift tail
                                                        : L1_Pipe2_PIPE2_Entry_reconstructed_is_tail_a1[entry];  // retain tail
                     assign L1_Pipe2_PIPE2_Entry_state_a0[entry] = L1_Pipe2_PIPE2_reset_a0 ? 1'b0
                                                : L2_valid_a0 && ! (L1_Pipe2_PIPE2_two_valid_a0 && L2_is_tail_a0); end
               //_@1
                  assign L1_Pipe2_PIPE2_empty_a1 = ! L1_Pipe2_PIPE2_two_valid_a1 && ! L1_Pipe2_PIPE2_valid_count_a1[0];
                  assign L1_Pipe2_PIPE2_full_a1 = (L1_Pipe2_PIPE2_valid_count_a1 == full_mark_7);  // Could optimize for power-of-two depth.
               for (entry = 0; entry <= (4)-1; entry++) begin : L2c_Pipe2_PIPE2_Entry logic L2_is_head_a1; logic L2_next_entry_state_a1; logic L2_prev_entry_state_a1; logic L2_reconstructed_valid_a1; //_>entry
                  //_@1
                     assign L2_prev_entry_state_a1 = L1_Pipe2_PIPE2_Entry_state_a1[(entry+(4)-1)%(4)];
                     assign L2_next_entry_state_a1 = L1_Pipe2_PIPE2_Entry_state_a1[(entry+1)%(4)];
                     assign L1_Pipe2_PIPE2_Entry_reconstructed_is_tail_a1[entry] = (  L1_Pipe2_PIPE2_two_valid_a1 && (!L1_Pipe2_PIPE2_Entry_state_a1[entry] && L2_prev_entry_state_a1)) ||
                                              (! L1_Pipe2_PIPE2_two_valid_a1 && (!L2_next_entry_state_a1 && L1_Pipe2_PIPE2_Entry_state_a1[entry])) ||
                                              (L1_Pipe2_PIPE2_empty_a1 && (entry == 0));  // need a tail when empty for push
                     assign L2_is_head_a1 = L1_Pipe2_PIPE2_Entry_state_a1[entry] && ! L2_prev_entry_state_a1;
                     assign L2_reconstructed_valid_a1 = L1_Pipe2_PIPE2_Entry_state_a1[entry] || (L1_Pipe2_PIPE2_two_valid_a1 && L2_prev_entry_state_a1); end
            // Write data
            //_|pipe2
               //_@0
                  for (entry = 0; entry <= (4)-1; entry++) begin : L2d_Pipe2_PIPE2_Entry logic [RING_STOPS_WIDTH-1:0] L2_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L2_Trans_dest_a1; logic [RING_STOPS_WIDTH-1:0] L2_Trans_sender_a0; logic [RING_STOPS_WIDTH-1:0] L2_Trans_sender_a1; //_>entry
                     //?$push
                     //   $aNY = |m4_in_pipe['']m4_trans_hier$ANY;
                     //_>trans
                        assign {L2_Trans_dest_a0[RING_STOPS_WIDTH-1:0], L2_Trans_sender_a0[RING_STOPS_WIDTH-1:0]} = L1_Pipe2_PIPE2_Entry_push_a0[entry] ? {L1_Pipe2_PIPE2_Trans_dest_a0, L1_Pipe2_PIPE2_Trans_sender_a0} : {L2_Trans_dest_a1, L2_Trans_sender_a1} /* RETAIN */; end
            // Read data
            //_|fifo2_out
               //_@0
                  //$pop  = ! >m4_top|m4_in_pipe%m4_align(m4_in_at + 1, m4_out_at)$empty && ! $blocked;
                  for (entry = 0; entry <= (4)-1; entry++) begin : L2b_Pipe2_FIFO2_OUT_Entry logic L2_is_head_a0; logic L2_pop_a0; logic [RING_STOPS_WIDTH-1:0] L2_ReadMasked_Trans_dest_a0; logic [RING_STOPS_WIDTH-1:0] L2_ReadMasked_Trans_sender_a0; //_>entry
                     assign L2_is_head_a0 = L2c_Pipe2_PIPE2_Entry[entry].L2_is_head_a1;
                     assign L2_pop_a0  = L2_is_head_a0 && ! L1_Pipe2_FIFO2_OUT_blocked_a0;
                     //_>read_masked
                        //_>trans
                           assign {L2_ReadMasked_Trans_dest_a0[RING_STOPS_WIDTH-1:0], L2_ReadMasked_Trans_sender_a0[RING_STOPS_WIDTH-1:0]} = L2_is_head_a0 ? {L2d_Pipe2_PIPE2_Entry[entry].L2_Trans_dest_a1, L2d_Pipe2_PIPE2_Entry[entry].L2_Trans_sender_a1} /* $aNY */ : '0;
                     //_>accum
                        //_>trans
                           assign {L1_Pipe2_FIFO2_OUT_Entry_Accum_Trans_dest_a0[entry][RING_STOPS_WIDTH-1:0], L1_Pipe2_FIFO2_OUT_Entry_Accum_Trans_sender_a0[entry][RING_STOPS_WIDTH-1:0]} = ((entry == 0) ? '0 : {L1_Pipe2_FIFO2_OUT_Entry_Accum_Trans_dest_a0[(entry+(4)-1)%(4)], L1_Pipe2_FIFO2_OUT_Entry_Accum_Trans_sender_a0[(entry+(4)-1)%(4)]}) |
                                  {L2_ReadMasked_Trans_dest_a0, L2_ReadMasked_Trans_sender_a0}; end
                  //_>head
                     assign L1_Pipe2_FIFO2_OUT_Head_trans_avail_a0 = L1_Pipe2_FIFO2_OUT_trans_avail_a0;
                     //_?$trans_avail
                        //_>trans
                           assign {w_L1_Pipe2_FIFO2_OUT_Head_Trans_dest_a0[RING_STOPS_WIDTH-1:0], w_L1_Pipe2_FIFO2_OUT_Head_Trans_sender_a0[RING_STOPS_WIDTH-1:0]} = {L1_Pipe2_FIFO2_OUT_Entry_Accum_Trans_dest_a0[(4)-1], L1_Pipe2_FIFO2_OUT_Entry_Accum_Trans_sender_a0[(4)-1]};
         
            // Bypass
            //_|fifo2_out
               //_@0
                  // Available output.  Sometimes it's necessary to know what would be coming to determined
                  // if it's blocked.  This can be used externally in that case.
                  //_>fifo_head
                     assign L1_Pipe2_FIFO2_OUT_FifoHead_trans_avail_a0 = L1_Pipe2_FIFO2_OUT_trans_avail_a0;
                     //_?$trans_avail
                        //_>trans
                           assign {w_L1_Pipe2_FIFO2_OUT_FifoHead_Trans_dest_a0[RING_STOPS_WIDTH-1:0], w_L1_Pipe2_FIFO2_OUT_FifoHead_Trans_sender_a0[RING_STOPS_WIDTH-1:0]} = L1_Pipe2_PIPE2_would_bypass_a0
                                        ? {L1_Pipe2_PIPE2_Trans_dest_a0, L1_Pipe2_PIPE2_Trans_sender_a0}
                                        : {L1_Pipe2_FIFO2_OUT_Head_Trans_dest_a0, L1_Pipe2_FIFO2_OUT_Head_Trans_sender_a0};
                  assign L1_Pipe2_FIFO2_OUT_trans_avail_a0 = ! L1_Pipe2_PIPE2_would_bypass_a0 || L1_Pipe2_PIPE2_trans_avail_a0;
                  assign L1_Pipe2_FIFO2_OUT_trans_valid_a0 = L1_Pipe2_FIFO2_OUT_trans_avail_a0 && ! L1_Pipe2_FIFO2_OUT_blocked_a0;
                  //_?$trans_valid
                     //_>trans
                        assign {w_L1_Pipe2_FIFO2_OUT_Trans_dest_a0[RING_STOPS_WIDTH-1:0], w_L1_Pipe2_FIFO2_OUT_Trans_sender_a0[RING_STOPS_WIDTH-1:0]} = {L1_Pipe2_FIFO2_OUT_FifoHead_Trans_dest_a0, L1_Pipe2_FIFO2_OUT_FifoHead_Trans_sender_a0};
         
         
         
            /* Alternate code for pointer indexing.  Replaces $ANY expression above.
         
            // Hierarchy
            |pipe2
               >entry2[(4)-1:0]
         
            // Head/Tail ptrs.
            |pipe2
               @0
                  %next$WrPtr[\$clog2(4)-1:0] =
                      $reset       ? '0 :
                      $trans_valid ? ($WrPtr == (4 - 1))
                                       ? '0
                                       : $WrPtr + {{(\$clog2(4)-1){1'b0}}, 1'b1} :
                                     $RETAIN;
            |fifo2_out
               @0
                  %next$RdPtr[\$clog2(4)-1:0] =
                      >pipe2|pipe2%+0$reset
                                   ? '0 :
                      $trans_valid ? ($RdPtr == (4 - 1))
                                       ? '0
                                       : $RdPtr + {{(\$clog2(4)-1){1'b0}}, 1'b1} :
                                     $RETAIN;
            // Write FIFO
            |pipe2
               @0
                  $dummy = '0;
                  ?$trans_valid
                     // This doesn't work because SV complains for FIFOs in replicated context that
                     // there are multiple procedures that assign the signals.
                     // Array writes can be done in an SV module.
                     // The only long-term resolutions are support for module generation and use
                     // signals declared within for loops with cross-hierarchy references in SV.
                     // TODO: To make a simulation-efficient FIFO, use DesignWare.
                     {>entry2[$WrPtr]$$ANY} = $ANY;
            // Read FIFO
            |fifo2_out
               @0
                  >read2
                     $trans_valid = |fifo2_out$trans_valid;
                     ?$trans_valid
                        $ANY = >pipe2|pipe2>entry2[|fifo2_out$RdPtr]%+0$ANY;
                     `BOGUS_USE($dummy)
                  ?$trans_valid
                     $ANY = >read2$ANY;
            */
         //_\end_source
         //_|fifo2_out
            //_@0
               assign L1_Pipe2_FIFO2_OUT_blocked_a0 = 1'b0; end
   
   // Print
   for (ring_stop = 0; ring_stop <= RING_STOPS-1; ring_stop++) begin : L1d_RingStop //_>ring_stop
      //_>stall_pipe
         //_|stall0
            //_@0
               //_>trans
                  /*SV_plus*/
                     always_ff @(posedge clk) begin
                        $display("|stall0[%0d]", ring_stop);
                        $display("Destination: %0d", L1c_RingStop[ring_stop].L1_StallPipe_STALL0_Trans_dest_a0);
                     end
         //_|stall1
            //_@0
               //_>trans
                  /*SV_plus*/
                     always_ff @(posedge clk) begin
                        $display("|stall1[%0d]", ring_stop);
                        $display("Destination: %0d", L1c_RingStop[ring_stop].L1_StallPipe_STALL1_Trans_dest_a0);
                     end
         //_|stall2
            //_@0
               //_>trans
                  /*SV_plus*/
                     always_ff @(posedge clk) begin
                        $display("|stall2[%0d]", ring_stop);
                        $display("Destination: %0d", L1c_RingStop[ring_stop].L1_StallPipe_STALL2_Trans_dest_a0);
                     end
         //_|stall3
            //_@0
               //_>trans
                  /*SV_plus*/
                     always_ff @(posedge clk) begin
                        $display("|stall3[%0d]", ring_stop);
                        $display("Destination: %0d", L1c_RingStop[ring_stop].L1_StallPipe_STALL3_Trans_dest_a0);
                     end
         //_|fifo_out
            //_@0
               //_>trans
                  /*SV_plus*/
                     always_ff @(posedge clk) begin
                        $display("|fifo_out[%0d]", ring_stop);
                        $display("Destination: %0d", L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_Trans_dest_a0);
                     end
      //_|ring_in
         //_@0
            /*SV_plus*/
               always_ff @(posedge clk) begin
                  $display("|ring_in[%0d]", ring_stop);
                  $display("Destination: %0d", L1_RingStop[ring_stop].L1_RING_IN_dest_a0);
               end
      //_|ring_out
         //_@1
            /*SV_plus*/
               always_ff @(posedge clk) begin
                  $display("|ring_out[%0d]", ring_stop);
                  $display("Destination: %0d", L1b_RingStop[ring_stop].L1_RING_OUT_dest_a1);
               end
      //_|pipe1
         //_@0
            //_>trans
               /*SV_plus*/
                  always_ff @(posedge clk) begin
                     $display("|pipe1[%0d]", ring_stop);
                     $display("Destination: %0d", L1c_RingStop[ring_stop].L1_PIPE1_Trans_dest_a0);
                  end
      //_|arb_out
         //_@0
            //_>trans
               /*SV_plus*/
                  always_ff @(posedge clk) begin
                     $display("|arb_out[%0d]", ring_stop);
                     $display("Destination: %0d", L1c_RingStop[ring_stop].L1_ARB_OUT_Trans_dest_a0);
                  end
      //_>pipe2
         //_|pipe2
            //_@0
               //_>trans
                  /*SV_plus*/
                     always_ff @(posedge clk) begin
                        $display("|pipe2[%0d]", ring_stop);
                        $display("Destination: %0d", L1c_RingStop[ring_stop].L1_Pipe2_PIPE2_Trans_dest_a0);
                     end
         //_|fifo2_out
            //_@0
               //_>trans
                  /*SV_plus*/
                     always_ff @(posedge clk) begin
                        $display("|fifo2_out[%0d]", ring_stop);
                        $display("Destination: %0d", L1c_RingStop[ring_stop].L1_Pipe2_FIFO2_OUT_Trans_dest_a0);
                     end end

//_\SV
endmodule // slide_flow


// Undefine macros defined by SandPiper (in "flow_gen.sv").
`undef BOGUS_USE
`undef WHEN

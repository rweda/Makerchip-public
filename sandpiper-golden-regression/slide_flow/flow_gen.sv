// Generated by SandPiper(TM).
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)


// For X injection on assignments, disableable using `define SP_PHYS.
`ifdef WHEN
   $warning("WHEN macro redefined.");
`endif
`ifdef SP_PHYS
   `define WHEN(valid_sig)
`else
   `define WHEN(valid_sig) !valid_sig ? 'x :
`endif


genvar entry, ring_stop;


//
// Signals declared top-level.
//

// For >ring_stop|rg$dest.
logic [RING_STOPS_WIDTH-1:0] RingStop_RG_dest_a0 [RING_STOPS-1:0];
logic [RING_STOPS_WIDTH-1:0] RingStop_RG_dest_a1 [RING_STOPS-1:0];

// For >ring_stop|rg$pass_on.
logic RingStop_RG_pass_on_a0 [RING_STOPS-1:0];
logic RingStop_RG_pass_on_a1 [RING_STOPS-1:0];

// For >ring_stop|rg$sender.
logic [RING_STOPS_WIDTH-1:0] w_RingStop_RG_sender_a1 [RING_STOPS-1:0] /* without X injection for "when" condition */;
logic [RING_STOPS_WIDTH-1:0] RingStop_RG_sender_a1 [RING_STOPS-1:0];
logic [RING_STOPS_WIDTH-1:0] RingStop_RG_sender_a2 [RING_STOPS-1:0];

// For >tb>ring_stop|receive$NumPackets.
logic [RING_STOPS-1:0] [PACKET_SIZE-1:0] Tb_RingStop_RECEIVE_NumPackets_n1;
logic [RING_STOPS-1:0] [PACKET_SIZE-1:0] Tb_RingStop_RECEIVE_NumPackets_a0;

// For >tb|count$CycCount.
logic [15:0] Tb_COUNT_CycCount_n1;
logic [15:0] Tb_COUNT_CycCount_a0;

// For >tb|pass$packets.
logic [RING_STOPS*PACKET_SIZE-1:0] Tb_PASS_packets_a0;

// For >tb|pass$reset.
logic Tb_PASS_reset_a0;

// For |default$reset.
logic DEFAULT_reset_a0;
logic DEFAULT_reset_a1;


//
// Scope: >ring_stop[RING_STOPS-1:0]
//

//
// Scope: >ring_stop>pipe2
//

//
// Scope: >ring_stop>pipe2|fifo2_out
//

// Clock signals.
logic clkP_RingStop_Pipe2_FIFO2_OUT_trans_valid_a1 [RING_STOPS-1:0];

//
// Scope: >ring_stop>stall_pipe
//

//
// Scope: >ring_stop>stall_pipe|fifo_out
//

// Clock signals.
logic clkP_RingStop_StallPipe_FIFO_OUT_trans_valid_a1 [RING_STOPS-1:0];

//
// Scope: >ring_stop>stall_pipe|stall0
//

// Clock signals.
logic clkP_RingStop_StallPipe_STALL0_trans_valid_a1 [RING_STOPS-1:0];

//
// Scope: >ring_stop>stall_pipe|stall1
//

// Clock signals.
logic clkP_RingStop_StallPipe_STALL1_trans_avail_a1 [RING_STOPS-1:0];
logic clkP_RingStop_StallPipe_STALL1_trans_valid_a1 [RING_STOPS-1:0];

//
// Scope: >ring_stop>stall_pipe|stall2
//

// Clock signals.
logic clkP_RingStop_StallPipe_STALL2_trans_avail_a1 [RING_STOPS-1:0];
logic clkP_RingStop_StallPipe_STALL2_trans_valid_a1 [RING_STOPS-1:0];

//
// Scope: >ring_stop>stall_pipe|stall3
//

// Clock signals.
logic clkP_RingStop_StallPipe_STALL3_trans_valid_a1 [RING_STOPS-1:0];

//
// Scope: >ring_stop|arb_out
//

// Clock signals.
logic clkP_RingStop_ARB_OUT_trans_valid_a1 [RING_STOPS-1:0];

//
// Scope: >ring_stop|pipe1
//

// Clock signals.
logic clkP_RingStop_PIPE1_trans_valid_a1 [RING_STOPS-1:0];

//
// Scope: >ring_stop|rg
//

// Clock signals.
logic clkP_RingStop_RG_valid_a2 [RING_STOPS-1:0];

//
// Scope: >ring_stop|ring_in
//

// Clock signals.
logic clkP_RingStop_RING_IN_trans_valid_a1 [RING_STOPS-1:0];

//
// Scope: >tb
//

//
// Scope: >tb>ring_stop[RING_STOPS-1:0]
//

//
// Scope: >tb>ring_stop|send
//

// Clock signals.
logic clkP_Tb_RingStop_SEND_trans_valid_a1 [RING_STOPS-1:0];



   //
   // Scope: >ring_stop[RING_STOPS-1:0]
   //
   for (ring_stop = 0; ring_stop <= RING_STOPS-1; ring_stop++) begin : L1gen_RingStop

      //
      // Scope: >pipe2
      //


         //
         // Scope: |fifo2_out
         //

            // Staging of $trans_valid.
            always_ff @(posedge clk) L1c_RingStop[ring_stop].L1_Pipe2_FIFO2_OUT_trans_valid_a1 <= L1c_RingStop[ring_stop].L1_Pipe2_FIFO2_OUT_trans_valid_a0;


            //
            // Scope: >fifo_head
            //


               //
               // Scope: >trans
               //

                  // Inject X when invalid.
                  assign L1c_RingStop[ring_stop].L1_Pipe2_FIFO2_OUT_FifoHead_Trans_dest_a0 = `WHEN(L1c_RingStop[ring_stop].L1_Pipe2_FIFO2_OUT_FifoHead_trans_avail_a0) L1c_RingStop[ring_stop].w_L1_Pipe2_FIFO2_OUT_FifoHead_Trans_dest_a0;
                  // Inject X when invalid.
                  assign L1c_RingStop[ring_stop].L1_Pipe2_FIFO2_OUT_FifoHead_Trans_sender_a0 = `WHEN(L1c_RingStop[ring_stop].L1_Pipe2_FIFO2_OUT_FifoHead_trans_avail_a0) L1c_RingStop[ring_stop].w_L1_Pipe2_FIFO2_OUT_FifoHead_Trans_sender_a0;



            //
            // Scope: >head
            //


               //
               // Scope: >trans
               //

                  // Inject X when invalid.
                  assign L1c_RingStop[ring_stop].L1_Pipe2_FIFO2_OUT_Head_Trans_dest_a0 = `WHEN(L1c_RingStop[ring_stop].L1_Pipe2_FIFO2_OUT_Head_trans_avail_a0) L1c_RingStop[ring_stop].w_L1_Pipe2_FIFO2_OUT_Head_Trans_dest_a0;
                  // Inject X when invalid.
                  assign L1c_RingStop[ring_stop].L1_Pipe2_FIFO2_OUT_Head_Trans_sender_a0 = `WHEN(L1c_RingStop[ring_stop].L1_Pipe2_FIFO2_OUT_Head_trans_avail_a0) L1c_RingStop[ring_stop].w_L1_Pipe2_FIFO2_OUT_Head_Trans_sender_a0;



            //
            // Scope: >trans
            //

               // Inject X when invalid.
               assign L1c_RingStop[ring_stop].L1_Pipe2_FIFO2_OUT_Trans_dest_a0 = `WHEN(L1c_RingStop[ring_stop].L1_Pipe2_FIFO2_OUT_trans_valid_a0) L1c_RingStop[ring_stop].w_L1_Pipe2_FIFO2_OUT_Trans_dest_a0;
               // Staging of $sender.
               always_ff @(posedge clkP_RingStop_Pipe2_FIFO2_OUT_trans_valid_a1[ring_stop]) L1c_RingStop[ring_stop].L1_Pipe2_FIFO2_OUT_Trans_sender_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].w_L1_Pipe2_FIFO2_OUT_Trans_sender_a0[RING_STOPS_WIDTH-1:0];




         //
         // Scope: |pipe2
         //

            // Staging of $two_valid.
            always_ff @(posedge clk) L1c_RingStop[ring_stop].L1_Pipe2_PIPE2_two_valid_a1 <= L1c_RingStop[ring_stop].L1_Pipe2_PIPE2_two_valid_a0;

            // Staging of $valid_count.
            always_ff @(posedge clk) L1c_RingStop[ring_stop].L1_Pipe2_PIPE2_valid_count_a1[$clog2((4)+1)-1:0] <= L1c_RingStop[ring_stop].L1_Pipe2_PIPE2_valid_count_a0[$clog2((4)+1)-1:0];


            //
            // Scope: >entry[(4)-1:0]
            //
            for (entry = 0; entry <= (4)-1; entry++) begin : L2gen_Pipe2_PIPE2_Entry
               // Staging of $state.
               always_ff @(posedge clk) L1c_RingStop[ring_stop].L1_Pipe2_PIPE2_Entry_state_a1[entry] <= L1c_RingStop[ring_stop].L1_Pipe2_PIPE2_Entry_state_a0[entry];


               //
               // Scope: >trans
               //

                  // Staging of $dest.
                  always_ff @(posedge clk) L1c_RingStop[ring_stop].L2d_Pipe2_PIPE2_Entry[entry].L2_Trans_dest_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].L2d_Pipe2_PIPE2_Entry[entry].L2_Trans_dest_a0[RING_STOPS_WIDTH-1:0];

                  // Staging of $sender.
                  always_ff @(posedge clk) L1c_RingStop[ring_stop].L2d_Pipe2_PIPE2_Entry[entry].L2_Trans_sender_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].L2d_Pipe2_PIPE2_Entry[entry].L2_Trans_sender_a0[RING_STOPS_WIDTH-1:0];


            end

            //
            // Scope: >trans
            //

               // Inject X when invalid.
               assign L1c_RingStop[ring_stop].L1_Pipe2_PIPE2_Trans_dest_a0 = `WHEN(L1c_RingStop[ring_stop].L1_Pipe2_PIPE2_trans_valid_a0) L1c_RingStop[ring_stop].w_L1_Pipe2_PIPE2_Trans_dest_a0;
               // Inject X when invalid.
               assign L1c_RingStop[ring_stop].L1_Pipe2_PIPE2_Trans_sender_a0 = `WHEN(L1c_RingStop[ring_stop].L1_Pipe2_PIPE2_trans_valid_a0) L1c_RingStop[ring_stop].w_L1_Pipe2_PIPE2_Trans_sender_a0;




      //
      // Scope: >stall_pipe
      //


         //
         // Scope: |fifo_out
         //

            // Staging of $trans_valid.
            always_ff @(posedge clk) L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_trans_valid_a1 <= L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_trans_valid_a0;


            //
            // Scope: >fifo_head
            //


               //
               // Scope: >trans
               //

                  // Inject X when invalid.
                  assign L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_FifoHead_Trans_dest_a0 = `WHEN(L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_FifoHead_trans_avail_a0) L1c_RingStop[ring_stop].w_L1_StallPipe_FIFO_OUT_FifoHead_Trans_dest_a0;
                  // Inject X when invalid.
                  assign L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_FifoHead_Trans_sender_a0 = `WHEN(L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_FifoHead_trans_avail_a0) L1c_RingStop[ring_stop].w_L1_StallPipe_FIFO_OUT_FifoHead_Trans_sender_a0;



            //
            // Scope: >head
            //


               //
               // Scope: >trans
               //

                  // Inject X when invalid.
                  assign L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_Head_Trans_dest_a0 = `WHEN(L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_Head_trans_avail_a0) L1c_RingStop[ring_stop].w_L1_StallPipe_FIFO_OUT_Head_Trans_dest_a0;
                  // Inject X when invalid.
                  assign L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_Head_Trans_sender_a0 = `WHEN(L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_Head_trans_avail_a0) L1c_RingStop[ring_stop].w_L1_StallPipe_FIFO_OUT_Head_Trans_sender_a0;



            //
            // Scope: >trans
            //

               // Inject X when invalid.
               assign L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_Trans_dest_a0 = `WHEN(L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_trans_valid_a0) L1c_RingStop[ring_stop].w_L1_StallPipe_FIFO_OUT_Trans_dest_a0;
               // Staging of $dest.
               always_ff @(posedge clkP_RingStop_StallPipe_FIFO_OUT_trans_valid_a1[ring_stop]) L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_Trans_dest_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_Trans_dest_a0[RING_STOPS_WIDTH-1:0];

               // Staging of $sender.
               always_ff @(posedge clkP_RingStop_StallPipe_FIFO_OUT_trans_valid_a1[ring_stop]) L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_Trans_sender_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].w_L1_StallPipe_FIFO_OUT_Trans_sender_a0[RING_STOPS_WIDTH-1:0];




         //
         // Scope: |stall0
         //

            // Staging of $trans_avail.
            always_ff @(posedge clk) L1c_RingStop[ring_stop].L1_StallPipe_STALL0_trans_avail_a1 <= L1c_RingStop[ring_stop].L1_StallPipe_STALL0_trans_avail_a0;


            //
            // Scope: >trans
            //

               // Inject X when invalid.
               assign L1c_RingStop[ring_stop].L1_StallPipe_STALL0_Trans_dest_a0 = `WHEN(L1c_RingStop[ring_stop].L1_StallPipe_STALL0_trans_valid_a0) L1c_RingStop[ring_stop].w_L1_StallPipe_STALL0_Trans_dest_a0;
               // Staging of $dest.
               always_ff @(posedge clkP_RingStop_StallPipe_STALL0_trans_valid_a1[ring_stop]) L1c_RingStop[ring_stop].L1_StallPipe_STALL0_Trans_dest_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].L1_StallPipe_STALL0_Trans_dest_a0[RING_STOPS_WIDTH-1:0];

               // Staging of $sender.
               always_ff @(posedge clkP_RingStop_StallPipe_STALL0_trans_valid_a1[ring_stop]) L1c_RingStop[ring_stop].L1_StallPipe_STALL0_Trans_sender_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].w_L1_StallPipe_STALL0_Trans_sender_a0[RING_STOPS_WIDTH-1:0];




         //
         // Scope: |stall1
         //

            // Staging of $trans_avail.
            always_ff @(posedge clk) L1c_RingStop[ring_stop].L1_StallPipe_STALL1_trans_avail_a1 <= L1c_RingStop[ring_stop].L1_StallPipe_STALL1_trans_avail_a0;


            //
            // Scope: >trans
            //

               // Inject X when invalid.
               assign L1c_RingStop[ring_stop].L1_StallPipe_STALL1_Trans_dest_a0 = `WHEN(L1c_RingStop[ring_stop].L1_StallPipe_STALL1_trans_avail_a0) L1c_RingStop[ring_stop].w_L1_StallPipe_STALL1_Trans_dest_a0;
               // Staging of $dest.
               always_ff @(posedge clkP_RingStop_StallPipe_STALL1_trans_avail_a1[ring_stop]) L1c_RingStop[ring_stop].L1_StallPipe_STALL1_Trans_dest_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].L1_StallPipe_STALL1_Trans_dest_a0[RING_STOPS_WIDTH-1:0];

               // Staging of $sender.
               always_ff @(posedge clkP_RingStop_StallPipe_STALL1_trans_avail_a1[ring_stop]) L1c_RingStop[ring_stop].L1_StallPipe_STALL1_Trans_sender_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].w_L1_StallPipe_STALL1_Trans_sender_a0[RING_STOPS_WIDTH-1:0];



            //
            // Scope: >trans_hold
            //

               // Inject X when invalid.
               assign L1c_RingStop[ring_stop].L1_StallPipe_STALL1_TransHold_dest_a0 = `WHEN(L1c_RingStop[ring_stop].L1_StallPipe_STALL1_trans_valid_a0) L1c_RingStop[ring_stop].w_L1_StallPipe_STALL1_TransHold_dest_a0;
               // Staging of $dest.
               always_ff @(posedge clkP_RingStop_StallPipe_STALL1_trans_valid_a1[ring_stop]) L1c_RingStop[ring_stop].L1_StallPipe_STALL1_TransHold_dest_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].L1_StallPipe_STALL1_TransHold_dest_a0[RING_STOPS_WIDTH-1:0];

               // Inject X when invalid.
               assign L1c_RingStop[ring_stop].L1_StallPipe_STALL1_TransHold_sender_a0 = `WHEN(L1c_RingStop[ring_stop].L1_StallPipe_STALL1_trans_valid_a0) L1c_RingStop[ring_stop].w_L1_StallPipe_STALL1_TransHold_sender_a0;
               // Staging of $sender.
               always_ff @(posedge clkP_RingStop_StallPipe_STALL1_trans_valid_a1[ring_stop]) L1c_RingStop[ring_stop].L1_StallPipe_STALL1_TransHold_sender_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].L1_StallPipe_STALL1_TransHold_sender_a0[RING_STOPS_WIDTH-1:0];




         //
         // Scope: |stall2
         //

            // Staging of $trans_avail.
            always_ff @(posedge clk) L1c_RingStop[ring_stop].L1_StallPipe_STALL2_trans_avail_a1 <= L1c_RingStop[ring_stop].L1_StallPipe_STALL2_trans_avail_a0;


            //
            // Scope: >trans
            //

               // Inject X when invalid.
               assign L1c_RingStop[ring_stop].L1_StallPipe_STALL2_Trans_dest_a0 = `WHEN(L1c_RingStop[ring_stop].L1_StallPipe_STALL2_trans_avail_a0) L1c_RingStop[ring_stop].w_L1_StallPipe_STALL2_Trans_dest_a0;
               // Staging of $dest.
               always_ff @(posedge clkP_RingStop_StallPipe_STALL2_trans_avail_a1[ring_stop]) L1c_RingStop[ring_stop].L1_StallPipe_STALL2_Trans_dest_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].L1_StallPipe_STALL2_Trans_dest_a0[RING_STOPS_WIDTH-1:0];

               // Staging of $sender.
               always_ff @(posedge clkP_RingStop_StallPipe_STALL2_trans_avail_a1[ring_stop]) L1c_RingStop[ring_stop].L1_StallPipe_STALL2_Trans_sender_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].w_L1_StallPipe_STALL2_Trans_sender_a0[RING_STOPS_WIDTH-1:0];



            //
            // Scope: >trans_hold
            //

               // Inject X when invalid.
               assign L1c_RingStop[ring_stop].L1_StallPipe_STALL2_TransHold_dest_a0 = `WHEN(L1c_RingStop[ring_stop].L1_StallPipe_STALL2_trans_valid_a0) L1c_RingStop[ring_stop].w_L1_StallPipe_STALL2_TransHold_dest_a0;
               // Staging of $dest.
               always_ff @(posedge clkP_RingStop_StallPipe_STALL2_trans_valid_a1[ring_stop]) L1c_RingStop[ring_stop].L1_StallPipe_STALL2_TransHold_dest_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].L1_StallPipe_STALL2_TransHold_dest_a0[RING_STOPS_WIDTH-1:0];

               // Inject X when invalid.
               assign L1c_RingStop[ring_stop].L1_StallPipe_STALL2_TransHold_sender_a0 = `WHEN(L1c_RingStop[ring_stop].L1_StallPipe_STALL2_trans_valid_a0) L1c_RingStop[ring_stop].w_L1_StallPipe_STALL2_TransHold_sender_a0;
               // Staging of $sender.
               always_ff @(posedge clkP_RingStop_StallPipe_STALL2_trans_valid_a1[ring_stop]) L1c_RingStop[ring_stop].L1_StallPipe_STALL2_TransHold_sender_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].L1_StallPipe_STALL2_TransHold_sender_a0[RING_STOPS_WIDTH-1:0];




         //
         // Scope: |stall3
         //

            // Staging of $trans_avail.
            always_ff @(posedge clk) L1c_RingStop[ring_stop].L1_StallPipe_STALL3_trans_avail_a1 <= L1c_RingStop[ring_stop].L1_StallPipe_STALL3_trans_avail_a0;

            // Staging of $two_valid.
            always_ff @(posedge clk) L1c_RingStop[ring_stop].L1_StallPipe_STALL3_two_valid_a1 <= L1c_RingStop[ring_stop].L1_StallPipe_STALL3_two_valid_a0;

            // Staging of $valid_count.
            always_ff @(posedge clk) L1c_RingStop[ring_stop].L1_StallPipe_STALL3_valid_count_a1[$clog2((4)+1)-1:0] <= L1c_RingStop[ring_stop].L1_StallPipe_STALL3_valid_count_a0[$clog2((4)+1)-1:0];


            //
            // Scope: >entry[(4)-1:0]
            //
            for (entry = 0; entry <= (4)-1; entry++) begin : L2gen_StallPipe_STALL3_Entry
               // Staging of $state.
               always_ff @(posedge clk) L1c_RingStop[ring_stop].L1_StallPipe_STALL3_Entry_state_a1[entry] <= L1c_RingStop[ring_stop].L1_StallPipe_STALL3_Entry_state_a0[entry];


               //
               // Scope: >trans
               //

                  // Staging of $dest.
                  always_ff @(posedge clk) L1c_RingStop[ring_stop].L2d_StallPipe_STALL3_Entry[entry].L2_Trans_dest_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].L2d_StallPipe_STALL3_Entry[entry].L2_Trans_dest_a0[RING_STOPS_WIDTH-1:0];

                  // Staging of $sender.
                  always_ff @(posedge clk) L1c_RingStop[ring_stop].L2d_StallPipe_STALL3_Entry[entry].L2_Trans_sender_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].L2d_StallPipe_STALL3_Entry[entry].L2_Trans_sender_a0[RING_STOPS_WIDTH-1:0];


            end

            //
            // Scope: >trans
            //

               // Inject X when invalid.
               assign L1c_RingStop[ring_stop].L1_StallPipe_STALL3_Trans_dest_a0 = `WHEN(L1c_RingStop[ring_stop].L1_StallPipe_STALL3_trans_avail_a0) L1c_RingStop[ring_stop].w_L1_StallPipe_STALL3_Trans_dest_a0;
               // Inject X when invalid.
               assign L1c_RingStop[ring_stop].L1_StallPipe_STALL3_Trans_sender_a0 = `WHEN(L1c_RingStop[ring_stop].L1_StallPipe_STALL3_trans_avail_a0) L1c_RingStop[ring_stop].w_L1_StallPipe_STALL3_Trans_sender_a0;


            //
            // Scope: >trans_hold
            //

               // Inject X when invalid.
               assign L1c_RingStop[ring_stop].L1_StallPipe_STALL3_TransHold_dest_a0 = `WHEN(L1c_RingStop[ring_stop].L1_StallPipe_STALL3_trans_valid_a0) L1c_RingStop[ring_stop].w_L1_StallPipe_STALL3_TransHold_dest_a0;
               // Staging of $dest.
               always_ff @(posedge clkP_RingStop_StallPipe_STALL3_trans_valid_a1[ring_stop]) L1c_RingStop[ring_stop].L1_StallPipe_STALL3_TransHold_dest_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].L1_StallPipe_STALL3_TransHold_dest_a0[RING_STOPS_WIDTH-1:0];

               // Inject X when invalid.
               assign L1c_RingStop[ring_stop].L1_StallPipe_STALL3_TransHold_sender_a0 = `WHEN(L1c_RingStop[ring_stop].L1_StallPipe_STALL3_trans_valid_a0) L1c_RingStop[ring_stop].w_L1_StallPipe_STALL3_TransHold_sender_a0;
               // Staging of $sender.
               always_ff @(posedge clkP_RingStop_StallPipe_STALL3_trans_valid_a1[ring_stop]) L1c_RingStop[ring_stop].L1_StallPipe_STALL3_TransHold_sender_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].L1_StallPipe_STALL3_TransHold_sender_a0[RING_STOPS_WIDTH-1:0];





      //
      // Scope: |arb_out
      //

         // Staging of $trans_valid.
         always_ff @(posedge clk) L1c_RingStop[ring_stop].L1_ARB_OUT_trans_valid_a1 <= L1c_RingStop[ring_stop].L1_ARB_OUT_trans_valid_a0;


         //
         // Scope: >trans
         //

            // Inject X when invalid.
            assign L1c_RingStop[ring_stop].L1_ARB_OUT_Trans_dest_a0 = `WHEN(L1c_RingStop[ring_stop].L1_ARB_OUT_trans_valid_a0) L1c_RingStop[ring_stop].w_L1_ARB_OUT_Trans_dest_a0;
            // Staging of $dest.
            always_ff @(posedge clkP_RingStop_ARB_OUT_trans_valid_a1[ring_stop]) L1c_RingStop[ring_stop].L1_ARB_OUT_Trans_dest_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].L1_ARB_OUT_Trans_dest_a0[RING_STOPS_WIDTH-1:0];

            // Staging of $sender.
            always_ff @(posedge clkP_RingStop_ARB_OUT_trans_valid_a1[ring_stop]) L1c_RingStop[ring_stop].L1_ARB_OUT_Trans_sender_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].w_L1_ARB_OUT_Trans_sender_a0[RING_STOPS_WIDTH-1:0];




      //
      // Scope: |pipe1
      //

         // Staging of $trans_valid.
         always_ff @(posedge clk) L1c_RingStop[ring_stop].L1_PIPE1_trans_valid_a1 <= L1c_RingStop[ring_stop].L1_PIPE1_trans_valid_a0;


         //
         // Scope: >trans
         //

            // Inject X when invalid.
            assign L1c_RingStop[ring_stop].L1_PIPE1_Trans_dest_a0 = `WHEN(L1c_RingStop[ring_stop].L1_PIPE1_trans_valid_a0) L1c_RingStop[ring_stop].w_L1_PIPE1_Trans_dest_a0;
            // Staging of $dest.
            always_ff @(posedge clkP_RingStop_PIPE1_trans_valid_a1[ring_stop]) L1c_RingStop[ring_stop].L1_PIPE1_Trans_dest_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].L1_PIPE1_Trans_dest_a0[RING_STOPS_WIDTH-1:0];

            // Staging of $sender.
            always_ff @(posedge clkP_RingStop_PIPE1_trans_valid_a1[ring_stop]) L1c_RingStop[ring_stop].L1_PIPE1_Trans_sender_a1[RING_STOPS_WIDTH-1:0] <= L1c_RingStop[ring_stop].w_L1_PIPE1_Trans_sender_a0[RING_STOPS_WIDTH-1:0];




      //
      // Scope: |rg
      //

         // Staging of $dest.
         always_ff @(posedge clk) RingStop_RG_dest_a1[ring_stop][RING_STOPS_WIDTH-1:0] <= RingStop_RG_dest_a0[ring_stop][RING_STOPS_WIDTH-1:0];

         // Staging of $pass_on.
         always_ff @(posedge clk) RingStop_RG_pass_on_a1[ring_stop] <= RingStop_RG_pass_on_a0[ring_stop];

         // Staging of $passed_on.
         always_ff @(posedge clk) L1b_RingStop[ring_stop].L1_RG_passed_on_a1 <= L1b_RingStop[ring_stop].L1_RG_passed_on_a0;

         // Inject X when invalid.
         assign RingStop_RG_sender_a1[ring_stop] = `WHEN(L1b_RingStop[ring_stop].L1_RG_valid_a1) w_RingStop_RG_sender_a1[ring_stop];
         // Staging of $sender.
         always_ff @(posedge clkP_RingStop_RG_valid_a2[ring_stop]) RingStop_RG_sender_a2[ring_stop][RING_STOPS_WIDTH-1:0] <= RingStop_RG_sender_a1[ring_stop][RING_STOPS_WIDTH-1:0];

         // Staging of $valid.
         always_ff @(posedge clk) L1b_RingStop[ring_stop].L1_RG_valid_a1 <= L1b_RingStop[ring_stop].L1_RG_valid_a0;



      //
      // Scope: |ring_in
      //

         // Inject X when invalid.
         assign L1_RingStop[ring_stop].L1_RING_IN_dest_a0 = `WHEN(L1_RingStop[ring_stop].L1_RING_IN_trans_valid_a0) L1_RingStop[ring_stop].w_L1_RING_IN_dest_a0;
         // Staging of $sender.
         always_ff @(posedge clkP_RingStop_RING_IN_trans_valid_a1[ring_stop]) L1_RingStop[ring_stop].L1_RING_IN_sender_a1[RING_STOPS_WIDTH-1:0] <= L1_RingStop[ring_stop].w_L1_RING_IN_sender_a0[RING_STOPS_WIDTH-1:0];



      //
      // Scope: |ring_out
      //

         // Inject X when invalid.
         assign L1b_RingStop[ring_stop].L1_RING_OUT_dest_a1 = `WHEN(L1b_RingStop[ring_stop].L1_RING_OUT_trans_valid_a1) L1b_RingStop[ring_stop].w_L1_RING_OUT_dest_a1;
         // Inject X when invalid.
         assign L1b_RingStop[ring_stop].L1_RING_OUT_sender_a1 = `WHEN(L1b_RingStop[ring_stop].L1_RING_OUT_trans_valid_a1) L1b_RingStop[ring_stop].w_L1_RING_OUT_sender_a1;
         // Staging of $trans_valid.
         always_ff @(posedge clk) L1b_RingStop[ring_stop].L1_RING_OUT_trans_valid_a1 <= L1b_RingStop[ring_stop].L1_RING_OUT_trans_valid_a0;


   end

   //
   // Scope: >tb
   //


      //
      // Scope: >ring_stop[RING_STOPS-1:0]
      //
      for (ring_stop = 0; ring_stop <= RING_STOPS-1; ring_stop++) begin : L1gen_Tb_RingStop

         //
         // Scope: |receive
         //

            // Staging of $NumPackets.
            always_ff @(posedge clk) Tb_RingStop_RECEIVE_NumPackets_a0[ring_stop][PACKET_SIZE-1:0] <= Tb_RingStop_RECEIVE_NumPackets_n1[ring_stop][PACKET_SIZE-1:0];


            //
            // Scope: >trans
            //

               // Inject X when invalid.
               assign L1_Tb_RingStop[ring_stop].L1_RECEIVE_Trans_dest_a0 = `WHEN(L1_Tb_RingStop[ring_stop].L1_RECEIVE_trans_valid_a0) L1_Tb_RingStop[ring_stop].w_L1_RECEIVE_Trans_dest_a0;
               // Inject X when invalid.
               assign L1_Tb_RingStop[ring_stop].L1_RECEIVE_Trans_sender_a0 = `WHEN(L1_Tb_RingStop[ring_stop].L1_RECEIVE_trans_valid_a0) L1_Tb_RingStop[ring_stop].w_L1_RECEIVE_Trans_sender_a0;



         //
         // Scope: |send
         //

            // Staging of $trans_valid.
            always_ff @(posedge clk) L1_Tb_RingStop[ring_stop].L1_SEND_trans_valid_a1 <= L1_Tb_RingStop[ring_stop].L1_SEND_trans_valid_a0;


            //
            // Scope: >gen_trans
            //

               // Inject X when invalid.
               assign L1_Tb_RingStop[ring_stop].L1_SEND_GenTrans_dest_a0 = `WHEN(L1_Tb_RingStop[ring_stop].L1_SEND_valid_in_a0) L1_Tb_RingStop[ring_stop].w_L1_SEND_GenTrans_dest_a0;
               // Inject X when invalid.
               assign L1_Tb_RingStop[ring_stop].L1_SEND_GenTrans_dest_tmp_a0 = `WHEN(L1_Tb_RingStop[ring_stop].L1_SEND_valid_in_a0) L1_Tb_RingStop[ring_stop].w_L1_SEND_GenTrans_dest_tmp_a0;
               // Inject X when invalid.
               assign L1_Tb_RingStop[ring_stop].L1_SEND_GenTrans_sender_a0 = `WHEN(L1_Tb_RingStop[ring_stop].L1_SEND_valid_in_a0) L1_Tb_RingStop[ring_stop].w_L1_SEND_GenTrans_sender_a0;


            //
            // Scope: >trans_out
            //

               // Inject X when invalid.
               assign L1_Tb_RingStop[ring_stop].L1_SEND_TransOut_dest_a0 = `WHEN(L1_Tb_RingStop[ring_stop].L1_SEND_trans_valid_a0) L1_Tb_RingStop[ring_stop].w_L1_SEND_TransOut_dest_a0;
               // Staging of $dest.
               always_ff @(posedge clkP_Tb_RingStop_SEND_trans_valid_a1[ring_stop]) L1_Tb_RingStop[ring_stop].L1_SEND_TransOut_dest_a1[RING_STOPS_WIDTH-1:0] <= L1_Tb_RingStop[ring_stop].L1_SEND_TransOut_dest_a0[RING_STOPS_WIDTH-1:0];

               // Inject X when invalid.
               assign L1_Tb_RingStop[ring_stop].L1_SEND_TransOut_sender_a0 = `WHEN(L1_Tb_RingStop[ring_stop].L1_SEND_trans_valid_a0) L1_Tb_RingStop[ring_stop].w_L1_SEND_TransOut_sender_a0;
               // Staging of $sender.
               always_ff @(posedge clkP_Tb_RingStop_SEND_trans_valid_a1[ring_stop]) L1_Tb_RingStop[ring_stop].L1_SEND_TransOut_sender_a1[RING_STOPS_WIDTH-1:0] <= L1_Tb_RingStop[ring_stop].L1_SEND_TransOut_sender_a0[RING_STOPS_WIDTH-1:0];



      end

      //
      // Scope: |count
      //

         // Staging of $CycCount.
         always_ff @(posedge clk) Tb_COUNT_CycCount_a0[15:0] <= Tb_COUNT_CycCount_n1[15:0];




   //
   // Scope: |default
   //

      // Staging of $reset.
      always_ff @(posedge clk) DEFAULT_reset_a1 <= DEFAULT_reset_a0;





//
// Gated clocks.
//



   //
   // Scope: >ring_stop[RING_STOPS-1:0]
   //
   for (ring_stop = 0; ring_stop <= RING_STOPS-1; ring_stop++) begin : L1clk_RingStop

      //
      // Scope: >pipe2
      //


         //
         // Scope: |fifo2_out
         //

            clk_gate gen_clkP_RingStop_Pipe2_FIFO2_OUT_trans_valid_a1(clkP_RingStop_Pipe2_FIFO2_OUT_trans_valid_a1[ring_stop], clk, 1'b1, (L1c_RingStop[ring_stop].L1_Pipe2_FIFO2_OUT_trans_valid_a0 ? 1'b1 : 1'bx), 1'b0);



      //
      // Scope: >stall_pipe
      //


         //
         // Scope: |fifo_out
         //

            clk_gate gen_clkP_RingStop_StallPipe_FIFO_OUT_trans_valid_a1(clkP_RingStop_StallPipe_FIFO_OUT_trans_valid_a1[ring_stop], clk, 1'b1, (L1c_RingStop[ring_stop].L1_StallPipe_FIFO_OUT_trans_valid_a0 ? 1'b1 : 1'bx), 1'b0);


         //
         // Scope: |stall0
         //

            clk_gate gen_clkP_RingStop_StallPipe_STALL0_trans_valid_a1(clkP_RingStop_StallPipe_STALL0_trans_valid_a1[ring_stop], clk, 1'b1, (L1c_RingStop[ring_stop].L1_StallPipe_STALL0_trans_valid_a0 ? 1'b1 : 1'bx), 1'b0);


         //
         // Scope: |stall1
         //

            clk_gate gen_clkP_RingStop_StallPipe_STALL1_trans_avail_a1(clkP_RingStop_StallPipe_STALL1_trans_avail_a1[ring_stop], clk, 1'b1, (L1c_RingStop[ring_stop].L1_StallPipe_STALL1_trans_avail_a0 ? 1'b1 : 1'bx), 1'b0);
            clk_gate gen_clkP_RingStop_StallPipe_STALL1_trans_valid_a1(clkP_RingStop_StallPipe_STALL1_trans_valid_a1[ring_stop], clk, 1'b1, (L1c_RingStop[ring_stop].L1_StallPipe_STALL1_trans_valid_a0 ? 1'b1 : 1'bx), 1'b0);


         //
         // Scope: |stall2
         //

            clk_gate gen_clkP_RingStop_StallPipe_STALL2_trans_avail_a1(clkP_RingStop_StallPipe_STALL2_trans_avail_a1[ring_stop], clk, 1'b1, (L1c_RingStop[ring_stop].L1_StallPipe_STALL2_trans_avail_a0 ? 1'b1 : 1'bx), 1'b0);
            clk_gate gen_clkP_RingStop_StallPipe_STALL2_trans_valid_a1(clkP_RingStop_StallPipe_STALL2_trans_valid_a1[ring_stop], clk, 1'b1, (L1c_RingStop[ring_stop].L1_StallPipe_STALL2_trans_valid_a0 ? 1'b1 : 1'bx), 1'b0);


         //
         // Scope: |stall3
         //

            clk_gate gen_clkP_RingStop_StallPipe_STALL3_trans_valid_a1(clkP_RingStop_StallPipe_STALL3_trans_valid_a1[ring_stop], clk, 1'b1, (L1c_RingStop[ring_stop].L1_StallPipe_STALL3_trans_valid_a0 ? 1'b1 : 1'bx), 1'b0);



      //
      // Scope: |arb_out
      //

         clk_gate gen_clkP_RingStop_ARB_OUT_trans_valid_a1(clkP_RingStop_ARB_OUT_trans_valid_a1[ring_stop], clk, 1'b1, (L1c_RingStop[ring_stop].L1_ARB_OUT_trans_valid_a0 ? 1'b1 : 1'bx), 1'b0);


      //
      // Scope: |pipe1
      //

         clk_gate gen_clkP_RingStop_PIPE1_trans_valid_a1(clkP_RingStop_PIPE1_trans_valid_a1[ring_stop], clk, 1'b1, (L1c_RingStop[ring_stop].L1_PIPE1_trans_valid_a0 ? 1'b1 : 1'bx), 1'b0);


      //
      // Scope: |rg
      //

         clk_gate gen_clkP_RingStop_RG_valid_a2(clkP_RingStop_RG_valid_a2[ring_stop], clk, 1'b1, (L1b_RingStop[ring_stop].L1_RG_valid_a1 ? 1'b1 : 1'bx), 1'b0);


      //
      // Scope: |ring_in
      //

         clk_gate gen_clkP_RingStop_RING_IN_trans_valid_a1(clkP_RingStop_RING_IN_trans_valid_a1[ring_stop], clk, 1'b1, (L1_RingStop[ring_stop].L1_RING_IN_trans_valid_a0 ? 1'b1 : 1'bx), 1'b0);

   end

   //
   // Scope: >tb
   //


      //
      // Scope: >ring_stop[RING_STOPS-1:0]
      //
      for (ring_stop = 0; ring_stop <= RING_STOPS-1; ring_stop++) begin : L1clk_Tb_RingStop

         //
         // Scope: |send
         //

            clk_gate gen_clkP_Tb_RingStop_SEND_trans_valid_a1(clkP_Tb_RingStop_SEND_trans_valid_a1[ring_stop], clk, 1'b1, (L1_Tb_RingStop[ring_stop].L1_SEND_trans_valid_a0 ? 1'b1 : 1'bx), 1'b0);

      end



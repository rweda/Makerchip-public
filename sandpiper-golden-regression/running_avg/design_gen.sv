// Generated by SandPiper(TM).
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)


// For X injection on assignments, disableable using `define SP_PHYS.
`ifdef WHEN
   $warning("WHEN macro redefined.");
`endif
`ifdef SP_PHYS
   `define WHEN(valid_sig)
`else
   `define WHEN(valid_sig) !valid_sig ? 'x :
`endif





//
// Scope: |calc
//

// For |calc$CycCnt.
logic [15:0] CALC_CycCnt_a0;
logic [15:0] CALC_CycCnt_a1;
logic [15:0] CALC_CycCnt_a2;
logic [15:0] CALC_CycCnt_a3;

// For |calc$avg.
logic [7:-8] CALC_avg_a3;
logic [7:-8] CALC_avg_a4;
logic [7:-8] CALC_avg_a5;

// For |calc$rand_val.
logic [7:0] CALC_rand_val_a0;

// For |calc$reset.
logic CALC_reset_n1;
logic CALC_reset_a0;
logic CALC_reset_a1;
logic CALC_reset_a2;
logic CALC_reset_a3;

// For |calc$sum.
logic [15:0] CALC_sum_a1;
logic [15:0] CALC_sum_a2;

// For |calc$val.
logic [7:0] CALC_val_a0;
logic [7:0] CALC_val_a1;
logic [7:0] CALC_val_a2;
logic [7:0] CALC_val_a3;

// For |calc$weighted_avg.
logic [7:-16] CALC_weighted_avg_a2;
logic [7:-8] CALC_weighted_avg_a3;

// For |calc$weighted_sum.
logic [7:-8] CALC_weighted_sum_a2;
logic [7:-8] CALC_weighted_sum_a3;



   //
   // Scope: |calc
   //

      // Staging of $CycCnt.
      always_ff @(posedge clk) CALC_CycCnt_a1[15:0] <= CALC_CycCnt_a0[15:0];
      always_ff @(posedge clk) CALC_CycCnt_a2[15:0] <= CALC_CycCnt_a1[15:0];
      always_ff @(posedge clk) CALC_CycCnt_a3[15:0] <= CALC_CycCnt_a2[15:0];

      // Staging of $avg.
      always_ff @(posedge clk) CALC_avg_a4[7:-8] <= CALC_avg_a3[7:-8];
      always_ff @(posedge clk) CALC_avg_a5[7:-8] <= CALC_avg_a4[7:-8];

      // Staging of $reset.
      always_ff @(posedge clk) CALC_reset_a0 <= CALC_reset_n1;
      always_ff @(posedge clk) CALC_reset_a1 <= CALC_reset_a0;
      always_ff @(posedge clk) CALC_reset_a2 <= CALC_reset_a1;
      always_ff @(posedge clk) CALC_reset_a3 <= CALC_reset_a2;

      // Staging of $sum.
      always_ff @(posedge clk) CALC_sum_a2[15:0] <= CALC_sum_a1[15:0];

      // Staging of $val.
      always_ff @(posedge clk) CALC_val_a1[7:0] <= CALC_val_a0[7:0];
      always_ff @(posedge clk) CALC_val_a2[7:0] <= CALC_val_a1[7:0];
      always_ff @(posedge clk) CALC_val_a3[7:0] <= CALC_val_a2[7:0];

      // Staging of $weighted_avg.
      always_ff @(posedge clk) CALC_weighted_avg_a3[7:-8] <= CALC_weighted_avg_a2[7:-8];

      // Staging of $weighted_sum.
      always_ff @(posedge clk) CALC_weighted_sum_a3[7:-8] <= CALC_weighted_sum_a2[7:-8];




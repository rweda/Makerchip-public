// Generated by SandPiper(TM).
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)


genvar cmd;


//
// Scope: |pipeline
//

//
// Scope: |pipeline>cmd[1:0]
//

// For |pipeline>cmd$accum.
logic [7:0] PIPELINE_Cmd_accum_a2 [1:0];
logic [7:0] PIPELINE_Cmd_accum_a3 [1:0];
logic [7:0] PIPELINE_Cmd_accum_a4 [1:0];

// For |pipeline>cmd$decr.
logic w_PIPELINE_Cmd_decr_a1 [1:0];
logic PIPELINE_Cmd_decr_a2 [1:0];

// For |pipeline>cmd$halt.
logic [1:0] PIPELINE_Cmd_halt_a3;
logic [1:0] PIPELINE_Cmd_halt_a4;

// For |pipeline>cmd$incr.
logic w_PIPELINE_Cmd_incr_a1 [1:0];
logic PIPELINE_Cmd_incr_a2 [1:0];

// For |pipeline>cmd$opcode.
logic [2:0] PIPELINE_Cmd_opcode_a1 [1:0];
logic [2:0] PIPELINE_Cmd_opcode_a2 [1:0];
logic [2:0] PIPELINE_Cmd_opcode_a3 [1:0];

// For |pipeline>cmd$other.
logic w_PIPELINE_Cmd_other_a1 [1:0];
logic PIPELINE_Cmd_other_a2 [1:0];

// For |pipeline>cmd$valid.
logic PIPELINE_Cmd_valid_a0 [1:0];
logic PIPELINE_Cmd_valid_a1 [1:0];
logic PIPELINE_Cmd_valid_a2 [1:0];
logic PIPELINE_Cmd_valid_a3 [1:0];

// Clock signals.
logic clkP_PIPELINE_Cmd_valid_a2 [1:0];
logic clkP_PIPELINE_Cmd_valid_a3 [1:0];



   //
   // Scope: |pipeline
   //


      //
      // Scope: >cmd[1:0]
      //
      for (cmd = 0; cmd <= 1; cmd++) begin : L1gen_PIPELINE_Cmd
         // Staging of $accum.
         always_ff @(posedge clk) PIPELINE_Cmd_accum_a3[cmd][7:0] <= PIPELINE_Cmd_accum_a2[cmd][7:0];
         always_ff @(posedge clk) PIPELINE_Cmd_accum_a4[cmd][7:0] <= PIPELINE_Cmd_accum_a3[cmd][7:0];

         // Staging of $decr.
         always_ff @(posedge clkP_PIPELINE_Cmd_valid_a2[cmd]) PIPELINE_Cmd_decr_a2[cmd] <= w_PIPELINE_Cmd_decr_a1[cmd];

         // Staging of $halt.
         always_ff @(posedge clk) PIPELINE_Cmd_halt_a4[cmd] <= PIPELINE_Cmd_halt_a3[cmd];

         // Staging of $incr.
         always_ff @(posedge clkP_PIPELINE_Cmd_valid_a2[cmd]) PIPELINE_Cmd_incr_a2[cmd] <= w_PIPELINE_Cmd_incr_a1[cmd];

         // Staging of $opcode.
         always_ff @(posedge clkP_PIPELINE_Cmd_valid_a2[cmd]) PIPELINE_Cmd_opcode_a2[cmd][2:0] <= PIPELINE_Cmd_opcode_a1[cmd][2:0];
         always_ff @(posedge clkP_PIPELINE_Cmd_valid_a3[cmd]) PIPELINE_Cmd_opcode_a3[cmd][2:0] <= PIPELINE_Cmd_opcode_a2[cmd][2:0];

         // Staging of $other.
         always_ff @(posedge clkP_PIPELINE_Cmd_valid_a2[cmd]) PIPELINE_Cmd_other_a2[cmd] <= w_PIPELINE_Cmd_other_a1[cmd];

         // Staging of $valid.
         always_ff @(posedge clk) PIPELINE_Cmd_valid_a1[cmd] <= PIPELINE_Cmd_valid_a0[cmd];
         always_ff @(posedge clk) PIPELINE_Cmd_valid_a2[cmd] <= PIPELINE_Cmd_valid_a1[cmd];
         always_ff @(posedge clk) PIPELINE_Cmd_valid_a3[cmd] <= PIPELINE_Cmd_valid_a2[cmd];

      end




//
// Gated clocks.
//



   //
   // Scope: |pipeline
   //


      //
      // Scope: >cmd[1:0]
      //
      for (cmd = 0; cmd <= 1; cmd++) begin : L1clk_PIPELINE_Cmd
         clk_gate gen_clkP_PIPELINE_Cmd_valid_a2(clkP_PIPELINE_Cmd_valid_a2[cmd], clk, 1'b1, PIPELINE_Cmd_valid_a1[cmd], 1'b0);
         clk_gate gen_clkP_PIPELINE_Cmd_valid_a3(clkP_PIPELINE_Cmd_valid_a3[cmd], clk, 1'b1, PIPELINE_Cmd_valid_a2[cmd], 1'b0);
      end



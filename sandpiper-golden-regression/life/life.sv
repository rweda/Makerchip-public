//_\TLV_version 1c: tl-x.org, generated by SandPiper(TM)
`include "sp_verilog.vh"
/*
Copyright (c) 2015, Steven F. Hoover

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * The name of Steven F. Hoover
      may not be used to endorse or promote products derived from this software
      without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

module life(input logic clk, input logic reset, input logic [15:0] cyc_cnt, output logic passed, output logic failed);    /* verilator lint_off UNOPTFLAT */  bit [256:0] RW_rand_raw; bit [256+63:0] RW_rand_vect; pseudo_rand #(.WIDTH(257)) pseudo_rand (clk, reset, RW_rand_raw[256:0]); assign RW_rand_vect[256+63:0] = {RW_rand_raw[62:0], RW_rand_raw};  /* verilator lint_on UNOPTFLAT */

// -------------------------
// Parameters

// Board size
localparam X_SIZE = 10;  // Note: There's a hardcoded X_SIZE in $display statement.
localparam Y_SIZE = 10;


`include "life_gen.sv"

   // -------------------------
   // Design

   generate if (1) begin : L1_LIFE wire [X_SIZE-1:0] L1_Yy_Xx_Alive_a0 [Y_SIZE-1:0]; reg  [X_SIZE-1:0] L1_Yy_Xx_Alive_a1 [Y_SIZE-1:0]; wire [1:0] L1_Yy_Xx_row_cnt_a1 [Y_SIZE-1:0][X_SIZE-1:0]; //_|life
      for (yy = 0; yy <= Y_SIZE-1; yy=yy+1) begin : L2_Yy //_>yy
         for (xx = 0; xx <= X_SIZE-1; xx=xx+1) begin : L3_Xx wire [3:0] L3_cnt_a1; wire [0:0] L3_init_alive_a1; wire L3_reset_a0; reg  L3_reset_a1; //_>xx
            //_@0
               assign L3_reset_a0 = reset;
            //_@1
               // Cell logic

               // ===========
               // Population count ($cnt) of 3x3 square (with edge logic).
               
               // Sum left + me + right.
               assign L1_Yy_Xx_row_cnt_a1[yy][xx][1:0] = {1'b0, (L1_Yy_Xx_Alive_a1[yy][(xx + X_SIZE-1) % X_SIZE] & (xx > 0))} +
                               {1'b0, L1_Yy_Xx_Alive_a1[yy][xx]} +
                               {1'b0, (L1_Yy_Xx_Alive_a1[yy][(xx + 1) % X_SIZE] & (xx < X_SIZE-1))};
               // Sum three $row_cnt's: above + mine + below.
               assign L3_cnt_a1[3:0] = {2'b00, (L1_Yy_Xx_row_cnt_a1[(yy + Y_SIZE-1) % Y_SIZE][xx] & {2{(yy > 0)}})} +
                           {2'b00, L1_Yy_Xx_row_cnt_a1[yy][xx][1:0]} +
                           {2'b00, (L1_Yy_Xx_row_cnt_a1[(yy + 1) % Y_SIZE][xx] & {2{(yy < Y_SIZE-1)}})};


               // ===========
               // Init state.
               
               assign L3_init_alive_a1[0:0] = RW_rand_vect[(0 + ((yy * xx) ^ ((3 * xx) + yy))) % 257 +: 1];


               // ===========
               // Am I alive?
               
               assign L1_Yy_Xx_Alive_a0[yy][xx] = L3_reset_a1 ? L3_init_alive_a1 :                // init
                             L1_Yy_Xx_Alive_a1[yy][xx] ? (L3_cnt_a1 >= 3 && L3_cnt_a1 <= 4) :   // stay alive
                                      (L3_cnt_a1 == 3); end end end endgenerate                 // born




   // -------------------------
   // Embedded testbench
   // Declare success when total live cells was above 40% and remains below 20% for 20 cycles.

   // Count live cells through accumulation, into $alive_cnt.
   // Accumulate right-to-left, then bottom-to-top through >yy[0].
   generate if (1) begin : L1b_LIFE wire [21:0] L1_Yy_vert_alive_accum_a1 [Y_SIZE-1:0]; //_|life
      //_@0
         assign LIFE_reset_a0 = reset;
      //_@1
         for (yy = 0; yy <= Y_SIZE-1; yy=yy+1) begin : L2b_Yy wire [10:0] L2_Xx_horiz_alive_accum_a1 [X_SIZE-1:0]; //_>yy
            for (xx = 0; xx <= X_SIZE-1; xx=xx+1) begin : L3b_Xx //_>xx
               /*SV_plus*/
                  if (xx < X_SIZE - 1)
                     assign LIFE_Yy_Xx_right_alive_accum_a1[yy][xx][10:0] = L2_Xx_horiz_alive_accum_a1[xx + 1];
                  else
                     assign LIFE_Yy_Xx_right_alive_accum_a1[yy][xx][10:0] = 11'b0;
               assign L2_Xx_horiz_alive_accum_a1[xx][10:0] = LIFE_Yy_Xx_right_alive_accum_a1[yy][xx] + {10'b0, L1_LIFE.L1_Yy_Xx_Alive_a1[yy][xx]}; end
            /*SV_plus*/
               if (yy < Y_SIZE -1)
                  assign LIFE_Yy_below_alive_accum_a1[yy][21:0] = L1_Yy_vert_alive_accum_a1[yy + 1];
               else
                  assign LIFE_Yy_below_alive_accum_a1[yy][21:0] = 22'b0;
            assign L1_Yy_vert_alive_accum_a1[yy][21:0] = LIFE_Yy_below_alive_accum_a1[yy] + {11'b0, L2_Xx_horiz_alive_accum_a1[0]}; end
         assign LIFE_alive_cnt_a1[21:0] = L1_Yy_vert_alive_accum_a1[0];
         assign LIFE_above_min_start_a1 = LIFE_alive_cnt_a1 > (((X_SIZE * Y_SIZE) >> 3) * 3);  // 3/8
         assign LIFE_below_max_stop_a1  = LIFE_alive_cnt_a1 < (((X_SIZE * Y_SIZE) >> 4) * 1);  // 1/16
         assign LIFE_StartOk_a0 = LIFE_reset_a1 ? 1'b0 : (LIFE_StartOk_a1 || LIFE_above_min_start_a1);
         assign LIFE_StopCnt_a0[7:0] = LIFE_reset_a1          ? 8'b0 :
                              LIFE_below_max_stop_a1 ? LIFE_StopCnt_a1 + 8'b1 :
                                                8'b0;
         assign passed = LIFE_StartOk_a1 && (LIFE_StopCnt_a1 > 8'd20); end endgenerate

   generate if (1) begin : L1c_LIFE //_|life
      // Print
      //_@1
         /*SV_plus*/
            always_ff @(posedge clk) begin
               $display("---------------");
               for (int y = 0; y < Y_SIZE; y++) begin
                  if (!LIFE_reset_a1) begin
                     $display("    %10b", L1_LIFE.L1_Yy_Xx_Alive_a1[y]);
                  end
               end
            end end endgenerate
//_\SV
endmodule


// Undefine macros defined by SandPiper (in "life_gen.sv").
`undef BOGUS_USE

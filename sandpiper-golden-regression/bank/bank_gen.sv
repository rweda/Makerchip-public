// Generated by SandPiper(TM).
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)


// For X injection on assignments, disableable using `define SP_PHYS.
`ifdef WHEN
   $warning("WHEN macro redefined.");
`endif
`ifdef SP_PHYS
   `define WHEN(valid_sig)
`else
   `define WHEN(valid_sig) !valid_sig ? 'x :
`endif





//
// Signals declared top-level.
//

// For |bank$Balance.
logic [15:0] w_BANK_Balance_a1;
logic [15:0] BANK_Balance_a2;
logic [15:0] BANK_Balance_a3;
logic [15:0] BANK_Balance_a4;

// For |bank$CycCount.
logic [15:0] BANK_CycCount_a3;
logic [15:0] BANK_CycCount_a4;

// For |bank$NumTransaction.
logic [8:0] w_BANK_NumTransaction_a1;
logic [8:0] BANK_NumTransaction_a2;
logic [8:0] BANK_NumTransaction_a3;

// For |bank$action.
logic [0:0] BANK_action_a1;
logic [0:0] BANK_action_a2;
logic [0:0] BANK_action_a3;

// For |bank$amount.
logic [10:0] BANK_amount_a1;
logic [10:0] BANK_amount_a2;
logic [10:0] BANK_amount_a3;

// For |bank$init_balance.
logic [15:0] BANK_init_balance_a1;
logic [15:0] BANK_init_balance_a2;

// For |bank$reset.
logic BANK_reset_a0;
logic BANK_reset_a1;
logic BANK_reset_a2;
logic BANK_reset_a3;
logic BANK_reset_a4;

// For |bank$transaction.
logic [1:0] BANK_transaction_a1;
logic [1:0] BANK_transaction_a2;

// For |bank$valid_transaction.
logic BANK_valid_transaction_a2;
logic BANK_valid_transaction_a3;

// For |bank$valid_transaction_or_reset.
logic BANK_valid_transaction_or_reset_a2;
logic BANK_valid_transaction_or_reset_a3;
logic BANK_valid_transaction_or_reset_a4;

// For |bank$withdraw_error.
logic BANK_withdraw_error_a2;
logic BANK_withdraw_error_a3;


//
// Scope: |bank
//

// Clock signals.
logic clkF_BANK_valid_transaction_or_reset_a3 ;
logic clkF_BANK_valid_transaction_or_reset_a4 ;
logic clkF_BANK_valid_transaction_or_reset_a5 ;



   //
   // Scope: |bank
   //

      // Staging of $Balance.
      always_ff @(posedge clkF_BANK_valid_transaction_or_reset_a3) BANK_Balance_a2[15:0] <= w_BANK_Balance_a1[15:0];
      always_ff @(posedge clkF_BANK_valid_transaction_or_reset_a4) BANK_Balance_a3[15:0] <= BANK_Balance_a2[15:0];
      always_ff @(posedge clkF_BANK_valid_transaction_or_reset_a5) BANK_Balance_a4[15:0] <= BANK_Balance_a3[15:0];

      // Staging of $CycCount.
      always_ff @(posedge clk) BANK_CycCount_a4[15:0] <= BANK_CycCount_a3[15:0];

      // Staging of $NumTransaction.
      always_ff @(posedge clkF_BANK_valid_transaction_or_reset_a3) BANK_NumTransaction_a2[8:0] <= w_BANK_NumTransaction_a1[8:0];
      always_ff @(posedge clkF_BANK_valid_transaction_or_reset_a4) BANK_NumTransaction_a3[8:0] <= BANK_NumTransaction_a2[8:0];

      // Staging of $action.
      always_ff @(posedge clk) BANK_action_a2[0:0] <= BANK_action_a1[0:0];
      always_ff @(posedge clk) BANK_action_a3[0:0] <= BANK_action_a2[0:0];

      // Staging of $amount.
      always_ff @(posedge clk) BANK_amount_a2[10:0] <= BANK_amount_a1[10:0];
      always_ff @(posedge clk) BANK_amount_a3[10:0] <= BANK_amount_a2[10:0];

      // Staging of $init_balance.
      always_ff @(posedge clk) BANK_init_balance_a2[15:0] <= BANK_init_balance_a1[15:0];

      // Staging of $reset.
      always_ff @(posedge clk) BANK_reset_a1 <= BANK_reset_a0;
      always_ff @(posedge clk) BANK_reset_a2 <= BANK_reset_a1;
      always_ff @(posedge clk) BANK_reset_a3 <= BANK_reset_a2;
      always_ff @(posedge clk) BANK_reset_a4 <= BANK_reset_a3;

      // Staging of $transaction.
      always_ff @(posedge clk) BANK_transaction_a2[1:0] <= BANK_transaction_a1[1:0];

      // Staging of $valid_transaction.
      always_ff @(posedge clk) BANK_valid_transaction_a3 <= BANK_valid_transaction_a2;

      // Staging of $valid_transaction_or_reset.
      always_ff @(posedge clk) BANK_valid_transaction_or_reset_a3 <= BANK_valid_transaction_or_reset_a2;
      always_ff @(posedge clk) BANK_valid_transaction_or_reset_a4 <= BANK_valid_transaction_or_reset_a3;

      // Staging of $withdraw_error.
      always_ff @(posedge clk) BANK_withdraw_error_a3 <= BANK_withdraw_error_a2;





//
// Gated clocks.
//



   //
   // Scope: |bank
   //

      clk_gate gen_clkF_BANK_valid_transaction_or_reset_a3(clkF_BANK_valid_transaction_or_reset_a3, clk, BANK_valid_transaction_or_reset_a2, 1'b1, 1'b0);
      clk_gate gen_clkF_BANK_valid_transaction_or_reset_a4(clkF_BANK_valid_transaction_or_reset_a4, clk, BANK_valid_transaction_or_reset_a3, 1'b1, 1'b0);
      clk_gate gen_clkF_BANK_valid_transaction_or_reset_a5(clkF_BANK_valid_transaction_or_reset_a5, clk, BANK_valid_transaction_or_reset_a4, 1'b1, 1'b0);



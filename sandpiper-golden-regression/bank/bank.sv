//_\TLV_version 1c: tl-x.org, generated by SandPiper(TM)

   // -------------------------------------------------------------------------------
   // This example comes from Redwood EDA, LLC's TL-Verilog Tutorial Series,
   // available here:
   //   redwoodeda.com/lab
   //
   // This code implements a bank account balance.
   // Transactions consist of deposits and withdrawals.
   // -------------------------------------------------------------------------------

   // An "\SV" region, like this one, is just straight SystemVerilog
   // (with m4 macro preprocessing), and in this case, it's just an
   // m4 macro instantiation.

   module bank(input logic clk, input logic reset, input logic [15:0] cyc_cnt, output logic passed, output logic failed);    /* verilator lint_off UNOPTFLAT */  bit [256:0] RW_rand_raw; bit [256+63:0] RW_rand_vect; pseudo_rand #(.WIDTH(257)) pseudo_rand (clk, reset, RW_rand_raw[256:0]); assign RW_rand_vect[256+63:0] = {RW_rand_raw[62:0], RW_rand_raw};  /* verilator lint_on UNOPTFLAT */   // A generic module declaration macro instantiation
   /* verilator lint_off WIDTH */

`include "bank_gen.sv"

   //_|bank
      //_@0
         assign BANK_reset_a0 = reset;
      
      // ----------------------------------------------------------------------------
      // Randomize initial balance, account action, and amount to deposit or withdraw
      // ----------------------------------------------------------------------------
      //_@1
         assign BANK_init_balance_a1[15:0] = 16'b1; // initial balance
         assign BANK_action_a1[0:0] = RW_rand_vect[(0 + (0)) % 257 +: 1]; // deposit = 0; withdrawal = 1
         assign BANK_transaction_a1[1:0] = RW_rand_vect[(124 + (0)) % 257 +: 2]; // 75% chance of valid (01, 10, 11); 25% chance of invalid (00)
         assign BANK_amount_a1[10:0] = RW_rand_vect[(248 + (0)) % 257 +: 11]; // amount to deposit or withdraw
      
      // ---
      // DUT
      // ---
      //_@2
         assign BANK_valid_transaction_a2 = BANK_transaction_a2 != 2'b0;
         assign BANK_withdraw_error_a2 = BANK_action_a2 == 1'b1 && BANK_amount_a2 > BANK_Balance_a2 ? 1'b1 : // true if withdrawal amount is greater than current balance
                                                                   1'b0;  // false otherwise
         assign BANK_valid_transaction_or_reset_a2 = (BANK_valid_transaction_a2 && !BANK_withdraw_error_a2) || BANK_reset_a2;
         
         //_?$valid_transaction_or_reset
            assign w_BANK_Balance_a1[15:0] = BANK_reset_a2          ? BANK_init_balance_a2 :      // set to init_balance at the beginning
                                  BANK_action_a2 == 1'b0 ? BANK_Balance_a2 + BANK_amount_a2 : // deposit amount
                                                    BANK_Balance_a2 - BANK_amount_a2;  // withdraw amount
            
            //[(1)] make $NumTransaction count how many successful transactions occur
            assign w_BANK_NumTransaction_a1[8:0] = BANK_reset_a2 ? 11'b1 : BANK_NumTransaction_a2 + 11'b1;
      
      // -----------------
      // Print transaction
      // -----------------
      //_@3
         /*SV_plus*/
            always_ff @(posedge clk) begin
               if (BANK_valid_transaction_a3) begin
                  if (!BANK_withdraw_error_a3) begin
                     $display(" Transaction #: %0d", BANK_NumTransaction_a3);
                     $display("     $%5d %0s $%4d = $%5d", BANK_Balance_a3, BANK_action_a3 == 1'b0 ? "+" : "-", BANK_amount_a3, BANK_Balance_a2);
                  end else begin
                     $display(" Error: Not enough balance to withdraw that much.");
                     $display("     Balance: $%5d      Withdrawal Amount: $%4d", BANK_Balance_a3, BANK_amount_a3);
                  end
               end
            end
      
      // ---------------------------------------------------
      // Test for Positive Remaining Balance after 20 Cycles
      // ---------------------------------------------------
      //_@4
         assign BANK_CycCount_a3[15:0] = BANK_reset_a4 ? 16'b1 : BANK_CycCount_a4 + 1;
         assign passed = BANK_Balance_a4 > 0 && BANK_CycCount_a4 > 20;

//_\SV
endmodule



// Undefine macros defined by SandPiper (in "bank_gen.sv").
`undef BOGUS_USE
`undef WHEN

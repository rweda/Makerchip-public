// Generated by SandPiper(TM).
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)





//
// Scope: |inst
//

// For |inst$imm_data.
logic [63:0] INST_imm_data_a3;

// For |inst$op_a.
logic [63:0] w_INST_op_a_a3;
logic [63:0] INST_op_a_a4;

// For |inst$op_a_src.
logic [3:0] INST_op_a_src_a3;

// For |inst$op_b.
logic INST_op_b_a4;

// For |inst$opcode.
logic INST_opcode_a4;

// For |inst$reg_data.
logic [63:0] INST_reg_data_a5;

// For |inst$rslt.
logic [63:0] INST_rslt_a4;

// For |inst$valid.
logic INST_valid_a2;
logic INST_valid_a3;
logic INST_valid_a4;

// Clock signals.
logic clkP_INST_valid_a4 ;

//
// Scope: |pipe1
//

// For |pipe1$test_sig.
logic PIPE1_test_sig_a1;

// For |pipe1$tmp.
logic [0:0] PIPE1_tmp_a1;



   //
   // Scope: |inst
   //

      // Staging of $op_a.
      always_ff @(posedge clkP_INST_valid_a4) INST_op_a_a4[63:0] <= w_INST_op_a_a3[63:0];

      // Staging of signal $op_b, which had no assignment.
      assign INST_op_b_a4 = 'x;

      // Staging of signal $opcode, which had no assignment.
      assign INST_opcode_a4 = 'x;

      // Staging of $valid.
      always_ff @(posedge clk) INST_valid_a3 <= INST_valid_a2;
      always_ff @(posedge clk) INST_valid_a4 <= INST_valid_a3;





//
// Gated clocks.
//



   //
   // Scope: |inst
   //

      clk_gate gen_clkP_INST_valid_a4(clkP_INST_valid_a4, clk, 1'b1, INST_valid_a3, 1'b0);



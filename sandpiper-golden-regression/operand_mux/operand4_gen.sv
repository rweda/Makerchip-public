// Generated by SandPiper(TM).
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)





//
// Scope: |pipe1
//

// For |pipe1$imm_data.
logic [63:0] PIPE1_imm_data_a3;
logic [63:0] PIPE1_imm_data_a4;

// For |pipe1$op_a.
logic [63:0] PIPE1_op_a_a4;

// For |pipe1$op_a_src.
logic [3:0] PIPE1_op_a_src_a3;
logic [3:0] PIPE1_op_a_src_a4;

// For |pipe1$op_b.
logic PIPE1_op_b_a4;

// For |pipe1$opcode.
logic PIPE1_opcode_a4;

// For |pipe1$reg_data.
logic [63:0] PIPE1_reg_data_a5;
logic [63:0] PIPE1_reg_data_a6;

// For |pipe1$rslt.
logic [63:0] w_PIPE1_rslt_a4;
logic [63:0] PIPE1_rslt_a5;

// For |pipe1$valid.
logic PIPE1_valid_a3;
logic PIPE1_valid_a4;

// Clock signals.
logic clkP_PIPE1_valid_a5 ;



   //
   // Scope: |pipe1
   //

      // Staging of $imm_data.
      always_ff @(posedge clk) PIPE1_imm_data_a4[63:0] <= PIPE1_imm_data_a3[63:0];

      // Staging of $op_a_src.
      always_ff @(posedge clk) PIPE1_op_a_src_a4[3:0] <= PIPE1_op_a_src_a3[3:0];

      // Staging of signal $op_b, which had no assignment.
      assign PIPE1_op_b_a4 = 'x;

      // Staging of signal $opcode, which had no assignment.
      assign PIPE1_opcode_a4 = 'x;

      // Staging of $reg_data.
      always_ff @(posedge clk) PIPE1_reg_data_a6[63:0] <= PIPE1_reg_data_a5[63:0];

      // Staging of $rslt.
      always_ff @(posedge clkP_PIPE1_valid_a5) PIPE1_rslt_a5[63:0] <= w_PIPE1_rslt_a4[63:0];

      // Staging of $valid.
      always_ff @(posedge clk) PIPE1_valid_a4 <= PIPE1_valid_a3;





//
// Gated clocks.
//



   //
   // Scope: |pipe1
   //

      clk_gate gen_clkP_PIPE1_valid_a5(clkP_PIPE1_valid_a5, clk, 1'b1, PIPE1_valid_a4, 1'b0);



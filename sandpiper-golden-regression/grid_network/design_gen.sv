// Generated by SandPiper(TM).
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)


// For X injection on assignments, disableable using `define SP_PHYS.
`ifdef WHEN
   $warning("WHEN macro redefined.");
`endif
`ifdef SP_PHYS
   `define WHEN(valid_sig)
`else
   `define WHEN(valid_sig) !valid_sig ? 'x :
`endif


genvar entry, other_vc, prio, vc, xx, yy;


//
// Signals declared top-level.
//

// For >yy>xx|tb_gen>flit$dest_x.
logic [1-1:0] w_Yy_Xx_TB_GEN_Flit_dest_x_a1 [1:0][1:0] /* without X injection for "when" condition */;
logic [1-1:0] Yy_Xx_TB_GEN_Flit_dest_x_a1 [1:0][1:0];
logic [1-1:0] Yy_Xx_TB_GEN_Flit_dest_x_a2 [1:0][1:0];

// For >yy>xx|tb_gen>flit$dest_y.
logic [1-1:0] w_Yy_Xx_TB_GEN_Flit_dest_y_a1 [1:0][1:0] /* without X injection for "when" condition */;
logic [1-1:0] Yy_Xx_TB_GEN_Flit_dest_y_a1 [1:0][1:0];
logic [1-1:0] Yy_Xx_TB_GEN_Flit_dest_y_a2 [1:0][1:0];

// For >yy>xx|tb_gen>flit$flit_cnt.
logic [3:0] w_Yy_Xx_TB_GEN_Flit_flit_cnt_a1 [1:0][1:0] /* without X injection for "when" condition */;
logic [3:0] Yy_Xx_TB_GEN_Flit_flit_cnt_a1 [1:0][1:0];
logic [3:0] Yy_Xx_TB_GEN_Flit_flit_cnt_a2 [1:0][1:0];

// For >yy>xx|tb_gen>flit$pkt_cnt.
logic [7:0] w_Yy_Xx_TB_GEN_Flit_pkt_cnt_a1 [1:0][1:0] /* without X injection for "when" condition */;
logic [7:0] Yy_Xx_TB_GEN_Flit_pkt_cnt_a1 [1:0][1:0];
logic [7:0] Yy_Xx_TB_GEN_Flit_pkt_cnt_a2 [1:0][1:0];

// For >yy>xx|tb_gen>flit$src_x.
logic [1-1:0] w_Yy_Xx_TB_GEN_Flit_src_x_a1 [1:0][1:0] /* without X injection for "when" condition */;
logic [1-1:0] Yy_Xx_TB_GEN_Flit_src_x_a1 [1:0][1:0];
logic [1-1:0] Yy_Xx_TB_GEN_Flit_src_x_a2 [1:0][1:0];

// For >yy>xx|tb_gen>flit$src_y.
logic [1-1:0] w_Yy_Xx_TB_GEN_Flit_src_y_a1 [1:0][1:0] /* without X injection for "when" condition */;
logic [1-1:0] Yy_Xx_TB_GEN_Flit_src_y_a1 [1:0][1:0];
logic [1-1:0] Yy_Xx_TB_GEN_Flit_src_y_a2 [1:0][1:0];

// For >yy>xx|tb_gen>flit$vc.
logic [2-1:0] w_Yy_Xx_TB_GEN_Flit_vc_a1 [1:0][1:0] /* without X injection for "when" condition */;
logic [2-1:0] Yy_Xx_TB_GEN_Flit_vc_a1 [1:0][1:0];
logic [2-1:0] Yy_Xx_TB_GEN_Flit_vc_a2 [1:0][1:0];

// For >yy>xx|tb_out>flit$dest_x.
logic [1-1:0] w_Yy_Xx_TB_OUT_Flit_dest_x_a1 [1:0][1:0];
logic [1-1:0] Yy_Xx_TB_OUT_Flit_dest_x_a2 [1:0][1:0];

// For >yy>xx|tb_out>flit$dest_y.
logic [1-1:0] w_Yy_Xx_TB_OUT_Flit_dest_y_a1 [1:0][1:0];
logic [1-1:0] Yy_Xx_TB_OUT_Flit_dest_y_a2 [1:0][1:0];

// For >yy>xx|tb_out>flit$flit_cnt.
logic [3:0] w_Yy_Xx_TB_OUT_Flit_flit_cnt_a1 [1:0][1:0];
logic [3:0] Yy_Xx_TB_OUT_Flit_flit_cnt_a2 [1:0][1:0];

// For >yy>xx|tb_out>flit$pkt_cnt.
logic [7:0] w_Yy_Xx_TB_OUT_Flit_pkt_cnt_a1 [1:0][1:0];
logic [7:0] Yy_Xx_TB_OUT_Flit_pkt_cnt_a2 [1:0][1:0];

// For >yy>xx|tb_out>flit$src_x.
logic [1-1:0] w_Yy_Xx_TB_OUT_Flit_src_x_a1 [1:0][1:0];
logic [1-1:0] Yy_Xx_TB_OUT_Flit_src_x_a2 [1:0][1:0];

// For >yy>xx|tb_out>flit$src_y.
logic [1-1:0] w_Yy_Xx_TB_OUT_Flit_src_y_a1 [1:0][1:0];
logic [1-1:0] Yy_Xx_TB_OUT_Flit_src_y_a2 [1:0][1:0];

// For >yy>xx|tb_out>flit$vc.
logic [2-1:0] w_Yy_Xx_TB_OUT_Flit_vc_a1 [1:0][1:0];
logic [2-1:0] Yy_Xx_TB_OUT_Flit_vc_a2 [1:0][1:0];

// For |reset$reset.
logic RESET_reset_n1;
logic RESET_reset_a0;
logic RESET_reset_a1;

// For |tb_gen$CycCnt.
logic [15:0] TB_GEN_CycCnt_n2;
logic [15:0] TB_GEN_CycCnt_n1;
logic [15:0] TB_GEN_CycCnt_a0;
logic [15:0] TB_GEN_CycCnt_a1;
logic [15:0] TB_GEN_CycCnt_a2;

// For |tb_gen$inj_cnt.
logic [(1 + 1)-1:0] TB_GEN_inj_cnt_a1;
logic [(1 + 1)-1:0] TB_GEN_inj_cnt_a2;

// For |tb_gen$inj_sum.
logic [(1 + 1)-1:0] TB_GEN_inj_sum_a1;

// For |tb_gen>yy$inj_row_sum.
logic [(1 + 1)-1:0] TB_GEN_Yy_inj_row_sum_a1 [1:0];

// For |tb_out$FlitsInFlight.
logic [31:0] TB_OUT_FlitsInFlight_a1;
logic [31:0] TB_OUT_FlitsInFlight_a2;

// For |tb_out$eject_cnt.
logic [(1 + 1)-1:0] TB_OUT_eject_cnt_a2;

// For |tb_out$eject_sum.
logic [(1 + 1)-1:0] TB_OUT_eject_sum_a2;

// For |tb_out$reset.
logic TB_OUT_reset_a1;
logic TB_OUT_reset_a2;

// For |tb_out>yy$eject_row_sum.
logic [(1 + 1)-1:0] TB_OUT_Yy_eject_row_sum_a2 [1:0];


//
// Scope: >yy[1:0]
//

//
// Scope: >yy>xx[1:0]
//

//
// Scope: >yy>xx|netwk_inject
//

//
// Scope: >yy>xx|netwk_inject>fifos_out
//

// Clock signals.
logic clkP_Yy_Xx_NETWK_INJECT_FifosOut_fifo_trans_avail_a1 [1:0][1:0];

//
// Scope: >yy>xx|tb_gen
//

// Clock signals.
logic clkF_Yy_Xx_TB_GEN_reset_or_head_a2 [1:0][1:0];
logic clkF_Yy_Xx_TB_GEN_reset_or_trans_valid_a2 [1:0][1:0];
logic clkP_Yy_Xx_TB_GEN_trans_valid_a2 [1:0][1:0];

//
// Scope: >yy>xx|tb_out
//

// Clock signals.
logic clkP_Yy_Xx_TB_OUT_trans_valid_a2 [1:0][1:0];

//
// Scope: >yy>xx|tb_out>fifos_out
//

// Clock signals.
logic clkP_Yy_Xx_TB_OUT_FifosOut_fifo_trans_avail_a1 [1:0][1:0];



   //
   // Scope: >yy[1:0]
   //
   for (yy = 0; yy <= 1; yy++) begin : gen_Yy

      //
      // Scope: >xx[1:0]
      //
      for (xx = 0; xx <= 1; xx++) begin : gen_Xx

         //
         // Scope: >vc[3:0]
         //
         for (vc = 0; vc <= 3; vc++) begin : gen_Vc

            //
            // Scope: |netwk_eject
            //

               // Staging of $two_valid.
               always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].Vc_NETWK_EJECT_two_valid_a2[vc] <= b_Yy[yy].b_Xx[xx].Vc_NETWK_EJECT_two_valid_a1[vc];

               // Staging of $valid_count.
               always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].g_Vc[vc].NETWK_EJECT_valid_count_a2[$clog2((6)+1)-1:0] <= b_Yy[yy].b_Xx[xx].g_Vc[vc].NETWK_EJECT_valid_count_a1[$clog2((6)+1)-1:0];


               //
               // Scope: >entry[(6)-1:0]
               //
               for (entry = 0; entry <= (6)-1; entry++) begin : L4gen_NETWK_EJECT_Entry
                  // Staging of $state.
                  always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].g_Vc[vc].NETWK_EJECT_Entry_state_a2[entry] <= b_Yy[yy].b_Xx[xx].g_Vc[vc].NETWK_EJECT_Entry_state_a1[entry];


                  //
                  // Scope: >flit
                  //

                     // Staging of $data.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].g_Vc[vc].L4d_NETWK_EJECT_Entry[entry].Flit_data_a2[7:0] <= b_Yy[yy].b_Xx[xx].g_Vc[vc].L4d_NETWK_EJECT_Entry[entry].Flit_data_a1[7:0];

                     // Staging of $dest_x.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].g_Vc[vc].L4d_NETWK_EJECT_Entry[entry].Flit_dest_x_a2[1-1:0] <= b_Yy[yy].b_Xx[xx].g_Vc[vc].L4d_NETWK_EJECT_Entry[entry].Flit_dest_x_a1[1-1:0];

                     // Staging of $dest_y.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].g_Vc[vc].L4d_NETWK_EJECT_Entry[entry].Flit_dest_y_a2[1-1:0] <= b_Yy[yy].b_Xx[xx].g_Vc[vc].L4d_NETWK_EJECT_Entry[entry].Flit_dest_y_a1[1-1:0];

                     // Staging of $flit_cnt.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].g_Vc[vc].L4d_NETWK_EJECT_Entry[entry].Flit_flit_cnt_a2[3:0] <= b_Yy[yy].b_Xx[xx].g_Vc[vc].L4d_NETWK_EJECT_Entry[entry].Flit_flit_cnt_a1[3:0];

                     // Staging of $head.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].g_Vc[vc].NETWK_EJECT_Entry_Flit_head_a2[entry] <= b_Yy[yy].b_Xx[xx].g_Vc[vc].NETWK_EJECT_Entry_Flit_head_a1[entry];

                     // Staging of $pkt_cnt.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].g_Vc[vc].L4d_NETWK_EJECT_Entry[entry].Flit_pkt_cnt_a2[7:0] <= b_Yy[yy].b_Xx[xx].g_Vc[vc].L4d_NETWK_EJECT_Entry[entry].Flit_pkt_cnt_a1[7:0];

                     // Staging of $src_x.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].g_Vc[vc].L4d_NETWK_EJECT_Entry[entry].Flit_src_x_a2[1-1:0] <= b_Yy[yy].b_Xx[xx].g_Vc[vc].L4d_NETWK_EJECT_Entry[entry].Flit_src_x_a1[1-1:0];

                     // Staging of $src_y.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].g_Vc[vc].L4d_NETWK_EJECT_Entry[entry].Flit_src_y_a2[1-1:0] <= b_Yy[yy].b_Xx[xx].g_Vc[vc].L4d_NETWK_EJECT_Entry[entry].Flit_src_y_a1[1-1:0];

                     // Staging of $tail.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].g_Vc[vc].NETWK_EJECT_Entry_Flit_tail_a2[entry] <= b_Yy[yy].b_Xx[xx].g_Vc[vc].NETWK_EJECT_Entry_Flit_tail_a1[entry];

                     // Staging of $vc.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].g_Vc[vc].L4d_NETWK_EJECT_Entry[entry].Flit_vc_a2[2-1:0] <= b_Yy[yy].b_Xx[xx].g_Vc[vc].L4d_NETWK_EJECT_Entry[entry].Flit_vc_a1[2-1:0];


               end

               //
               // Scope: >flit
               //

                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].g_Vc[vc].NETWK_EJECT_Flit_data_a1 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_EJECT_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_NETWK_EJECT_Flit_data_a1;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].g_Vc[vc].NETWK_EJECT_Flit_dest_x_a1 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_EJECT_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_NETWK_EJECT_Flit_dest_x_a1;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].g_Vc[vc].NETWK_EJECT_Flit_dest_y_a1 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_EJECT_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_NETWK_EJECT_Flit_dest_y_a1;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].g_Vc[vc].NETWK_EJECT_Flit_flit_cnt_a1 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_EJECT_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_NETWK_EJECT_Flit_flit_cnt_a1;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].Vc_NETWK_EJECT_Flit_head_a1[vc] = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_EJECT_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].w_Vc_NETWK_EJECT_Flit_head_a1[vc];
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].g_Vc[vc].NETWK_EJECT_Flit_pkt_cnt_a1 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_EJECT_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_NETWK_EJECT_Flit_pkt_cnt_a1;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].g_Vc[vc].NETWK_EJECT_Flit_src_x_a1 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_EJECT_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_NETWK_EJECT_Flit_src_x_a1;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].g_Vc[vc].NETWK_EJECT_Flit_src_y_a1 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_EJECT_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_NETWK_EJECT_Flit_src_y_a1;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].Vc_NETWK_EJECT_Flit_tail_a1[vc] = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_EJECT_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].w_Vc_NETWK_EJECT_Flit_tail_a1[vc];
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].g_Vc[vc].NETWK_EJECT_Flit_vc_a1 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_EJECT_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_NETWK_EJECT_Flit_vc_a1;



            //
            // Scope: |netwk_inject
            //

               // Staging of $Prio.
               always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_Prio_a0[vc] <= b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_Prio_n1[vc];

               // Staging of $has_credit.
               always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_has_credit_a1[vc] <= b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_has_credit_a0[vc];

               // Staging of $trans_valid.
               always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_trans_valid_a1[vc] <= b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_trans_valid_a0[vc];


               //
               // Scope: >fifo_head
               //


                  //
                  // Scope: >flit
                  //

                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_FifoHead_Flit_data_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_FifoHead_Flit_data_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_FifoHead_Flit_dest_x_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_FifoHead_Flit_dest_x_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_FifoHead_Flit_dest_y_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_FifoHead_Flit_dest_y_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_FifoHead_Flit_flit_cnt_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_FifoHead_Flit_flit_cnt_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_FifoHead_Flit_head_a0[vc] = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].w_Vc_NETWK_INJECT_FifoHead_Flit_head_a0[vc];
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_FifoHead_Flit_pkt_cnt_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_FifoHead_Flit_pkt_cnt_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_FifoHead_Flit_src_x_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_FifoHead_Flit_src_x_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_FifoHead_Flit_src_y_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_FifoHead_Flit_src_y_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_FifoHead_Flit_tail_a0[vc] = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].w_Vc_NETWK_INJECT_FifoHead_Flit_tail_a0[vc];
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_FifoHead_Flit_vc_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_FifoHead_Flit_vc_a0;



               //
               // Scope: >flit
               //

                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_Flit_data_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_Flit_data_a0;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_Flit_dest_x_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_Flit_dest_x_a0;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_Flit_dest_y_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_Flit_dest_y_a0;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_Flit_flit_cnt_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_Flit_flit_cnt_a0;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_Flit_head_a0[vc] = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].w_Vc_NETWK_INJECT_Flit_head_a0[vc];
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_Flit_pkt_cnt_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_Flit_pkt_cnt_a0;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_Flit_src_x_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_Flit_src_x_a0;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_Flit_src_y_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_Flit_src_y_a0;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_Flit_tail_a0[vc] = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].w_Vc_NETWK_INJECT_Flit_tail_a0[vc];
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_Flit_vc_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_Flit_vc_a0;


               //
               // Scope: >head
               //


                  //
                  // Scope: >flit
                  //

                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_Head_Flit_data_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_Head_Flit_data_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_Head_Flit_dest_x_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_Head_Flit_dest_x_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_Head_Flit_dest_y_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_Head_Flit_dest_y_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_Head_Flit_flit_cnt_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_Head_Flit_flit_cnt_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_Head_Flit_head_a0[vc] = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].w_Vc_NETWK_INJECT_Head_Flit_head_a0[vc];
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_Head_Flit_pkt_cnt_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_Head_Flit_pkt_cnt_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_Head_Flit_src_x_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_Head_Flit_src_x_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_Head_Flit_src_y_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_Head_Flit_src_y_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_Head_Flit_tail_a0[vc] = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].w_Vc_NETWK_INJECT_Head_Flit_tail_a0[vc];
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].b_Vc[vc].NETWK_INJECT_Head_Flit_vc_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_NETWK_INJECT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_NETWK_INJECT_Head_Flit_vc_a0;



               //
               // Scope: >other_vc[3:0]
               //
               for (other_vc = 0; other_vc <= 3; other_vc++) begin : L4gen_NETWK_INJECT_OtherVc
                  // Staging of $SamePrio.
                  always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].c_Vc[vc].NETWK_INJECT_OtherVc_SamePrio_a0[other_vc] <= b_Yy[yy].b_Xx[xx].c_Vc[vc].NETWK_INJECT_OtherVc_SamePrio_n1[other_vc];

               end

               //
               // Scope: >prio[1:0]
               //
               for (prio = 0; prio <= 1; prio++) begin : L4gen_NETWK_INJECT_Prio
                  // Staging of $Match.
                  always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].c_Vc[vc].NETWK_INJECT_Prio_Match_a0[prio] <= b_Yy[yy].b_Xx[xx].c_Vc[vc].NETWK_INJECT_Prio_Match_n1[prio];

               end


            //
            // Scope: |tb_gen
            //

               // Staging of $two_valid.
               always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].Vc_TB_GEN_two_valid_a2[vc] <= b_Yy[yy].b_Xx[xx].Vc_TB_GEN_two_valid_a1[vc];

               // Staging of $valid_count.
               always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].b_Vc[vc].TB_GEN_valid_count_a2[$clog2((6)+1)-1:0] <= b_Yy[yy].b_Xx[xx].b_Vc[vc].TB_GEN_valid_count_a1[$clog2((6)+1)-1:0];


               //
               // Scope: >entry[(6)-1:0]
               //
               for (entry = 0; entry <= (6)-1; entry++) begin : L4gen_TB_GEN_Entry
                  // Staging of $state.
                  always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].b_Vc[vc].TB_GEN_Entry_state_a2[entry] <= b_Yy[yy].b_Xx[xx].b_Vc[vc].TB_GEN_Entry_state_a1[entry];


                  //
                  // Scope: >flit
                  //

                     // Staging of $data.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].b_Vc[vc].L4d_TB_GEN_Entry[entry].Flit_data_a2[7:0] <= b_Yy[yy].b_Xx[xx].b_Vc[vc].L4d_TB_GEN_Entry[entry].Flit_data_a1[7:0];

                     // Staging of $dest_x.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].b_Vc[vc].L4d_TB_GEN_Entry[entry].Flit_dest_x_a2[1-1:0] <= b_Yy[yy].b_Xx[xx].b_Vc[vc].L4d_TB_GEN_Entry[entry].Flit_dest_x_a1[1-1:0];

                     // Staging of $dest_y.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].b_Vc[vc].L4d_TB_GEN_Entry[entry].Flit_dest_y_a2[1-1:0] <= b_Yy[yy].b_Xx[xx].b_Vc[vc].L4d_TB_GEN_Entry[entry].Flit_dest_y_a1[1-1:0];

                     // Staging of $flit_cnt.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].b_Vc[vc].L4d_TB_GEN_Entry[entry].Flit_flit_cnt_a2[3:0] <= b_Yy[yy].b_Xx[xx].b_Vc[vc].L4d_TB_GEN_Entry[entry].Flit_flit_cnt_a1[3:0];

                     // Staging of $head.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].b_Vc[vc].TB_GEN_Entry_Flit_head_a2[entry] <= b_Yy[yy].b_Xx[xx].b_Vc[vc].TB_GEN_Entry_Flit_head_a1[entry];

                     // Staging of $pkt_cnt.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].b_Vc[vc].L4d_TB_GEN_Entry[entry].Flit_pkt_cnt_a2[7:0] <= b_Yy[yy].b_Xx[xx].b_Vc[vc].L4d_TB_GEN_Entry[entry].Flit_pkt_cnt_a1[7:0];

                     // Staging of $src_x.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].b_Vc[vc].L4d_TB_GEN_Entry[entry].Flit_src_x_a2[1-1:0] <= b_Yy[yy].b_Xx[xx].b_Vc[vc].L4d_TB_GEN_Entry[entry].Flit_src_x_a1[1-1:0];

                     // Staging of $src_y.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].b_Vc[vc].L4d_TB_GEN_Entry[entry].Flit_src_y_a2[1-1:0] <= b_Yy[yy].b_Xx[xx].b_Vc[vc].L4d_TB_GEN_Entry[entry].Flit_src_y_a1[1-1:0];

                     // Staging of $tail.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].b_Vc[vc].TB_GEN_Entry_Flit_tail_a2[entry] <= b_Yy[yy].b_Xx[xx].b_Vc[vc].TB_GEN_Entry_Flit_tail_a1[entry];

                     // Staging of $vc.
                     always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].b_Vc[vc].L4d_TB_GEN_Entry[entry].Flit_vc_a2[2-1:0] <= b_Yy[yy].b_Xx[xx].b_Vc[vc].L4d_TB_GEN_Entry[entry].Flit_vc_a1[2-1:0];


               end

               //
               // Scope: >flit
               //

                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].b_Vc[vc].TB_GEN_Flit_data_a1 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_GEN_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_TB_GEN_Flit_data_a1;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].b_Vc[vc].TB_GEN_Flit_dest_x_a1 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_GEN_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_TB_GEN_Flit_dest_x_a1;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].b_Vc[vc].TB_GEN_Flit_dest_y_a1 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_GEN_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_TB_GEN_Flit_dest_y_a1;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].b_Vc[vc].TB_GEN_Flit_flit_cnt_a1 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_GEN_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_TB_GEN_Flit_flit_cnt_a1;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].Vc_TB_GEN_Flit_head_a1[vc] = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_GEN_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].w_Vc_TB_GEN_Flit_head_a1[vc];
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].b_Vc[vc].TB_GEN_Flit_pkt_cnt_a1 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_GEN_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_TB_GEN_Flit_pkt_cnt_a1;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].b_Vc[vc].TB_GEN_Flit_src_x_a1 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_GEN_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_TB_GEN_Flit_src_x_a1;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].b_Vc[vc].TB_GEN_Flit_src_y_a1 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_GEN_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_TB_GEN_Flit_src_y_a1;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].Vc_TB_GEN_Flit_tail_a1[vc] = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_GEN_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].w_Vc_TB_GEN_Flit_tail_a1[vc];
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].b_Vc[vc].TB_GEN_Flit_vc_a1 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_GEN_trans_valid_a1[vc]) b_Yy[yy].b_Xx[xx].b_Vc[vc].w_TB_GEN_Flit_vc_a1;



            //
            // Scope: |tb_out
            //

               // Staging of $Prio.
               always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].Vc_TB_OUT_Prio_a0[vc] <= b_Yy[yy].b_Xx[xx].Vc_TB_OUT_Prio_n1[vc];

               // Staging of $has_credit.
               always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].i_Vc[vc].TB_OUT_has_credit_a1[0:0] <= b_Yy[yy].b_Xx[xx].i_Vc[vc].TB_OUT_has_credit_a0[0:0];

               // Staging of $trans_valid.
               always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].Vc_TB_OUT_trans_valid_a1[vc] <= b_Yy[yy].b_Xx[xx].Vc_TB_OUT_trans_valid_a0[vc];


               //
               // Scope: >fifo_head
               //


                  //
                  // Scope: >flit
                  //

                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_FifoHead_Flit_data_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_FifoHead_Flit_data_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_FifoHead_Flit_dest_x_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_FifoHead_Flit_dest_x_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_FifoHead_Flit_dest_y_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_FifoHead_Flit_dest_y_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_FifoHead_Flit_flit_cnt_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_FifoHead_Flit_flit_cnt_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].Vc_TB_OUT_FifoHead_Flit_head_a0[vc] = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].w_Vc_TB_OUT_FifoHead_Flit_head_a0[vc];
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_FifoHead_Flit_pkt_cnt_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_FifoHead_Flit_pkt_cnt_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_FifoHead_Flit_src_x_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_FifoHead_Flit_src_x_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_FifoHead_Flit_src_y_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_FifoHead_Flit_src_y_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].Vc_TB_OUT_FifoHead_Flit_tail_a0[vc] = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].w_Vc_TB_OUT_FifoHead_Flit_tail_a0[vc];
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_FifoHead_Flit_vc_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_FifoHead_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_FifoHead_Flit_vc_a0;



               //
               // Scope: >flit
               //

                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_Flit_data_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_Flit_data_a0;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_Flit_dest_x_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_Flit_dest_x_a0;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_Flit_dest_y_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_Flit_dest_y_a0;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_Flit_flit_cnt_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_Flit_flit_cnt_a0;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].Vc_TB_OUT_Flit_head_a0[vc] = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].w_Vc_TB_OUT_Flit_head_a0[vc];
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_Flit_pkt_cnt_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_Flit_pkt_cnt_a0;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_Flit_src_x_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_Flit_src_x_a0;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_Flit_src_y_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_Flit_src_y_a0;
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].Vc_TB_OUT_Flit_tail_a0[vc] = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].w_Vc_TB_OUT_Flit_tail_a0[vc];
                  // Inject X when invalid.
                  assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_Flit_vc_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_trans_valid_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_Flit_vc_a0;


               //
               // Scope: >head
               //


                  //
                  // Scope: >flit
                  //

                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_Head_Flit_data_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_Head_Flit_data_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_Head_Flit_dest_x_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_Head_Flit_dest_x_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_Head_Flit_dest_y_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_Head_Flit_dest_y_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_Head_Flit_flit_cnt_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_Head_Flit_flit_cnt_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].Vc_TB_OUT_Head_Flit_head_a0[vc] = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].w_Vc_TB_OUT_Head_Flit_head_a0[vc];
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_Head_Flit_pkt_cnt_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_Head_Flit_pkt_cnt_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_Head_Flit_src_x_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_Head_Flit_src_x_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_Head_Flit_src_y_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_Head_Flit_src_y_a0;
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].Vc_TB_OUT_Head_Flit_tail_a0[vc] = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].w_Vc_TB_OUT_Head_Flit_tail_a0[vc];
                     // Inject X when invalid.
                     assign b_Yy[yy].b_Xx[xx].g_Vc[vc].TB_OUT_Head_Flit_vc_a0 = `WHEN(b_Yy[yy].b_Xx[xx].Vc_TB_OUT_Head_trans_avail_a0[vc]) b_Yy[yy].b_Xx[xx].g_Vc[vc].w_TB_OUT_Head_Flit_vc_a0;



               //
               // Scope: >other_vc[3:0]
               //
               for (other_vc = 0; other_vc <= 3; other_vc++) begin : L4gen_TB_OUT_OtherVc
                  // Staging of $SamePrio.
                  always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].h_Vc[vc].TB_OUT_OtherVc_SamePrio_a0[other_vc] <= b_Yy[yy].b_Xx[xx].h_Vc[vc].TB_OUT_OtherVc_SamePrio_n1[other_vc];

               end

               //
               // Scope: >prio[1:0]
               //
               for (prio = 0; prio <= 1; prio++) begin : L4gen_TB_OUT_Prio
                  // Staging of $Match.
                  always_ff @(posedge clk) b_Yy[yy].b_Xx[xx].h_Vc[vc].TB_OUT_Prio_Match_a0[prio] <= b_Yy[yy].b_Xx[xx].h_Vc[vc].TB_OUT_Prio_Match_n1[prio];

               end

         end

         //
         // Scope: |netwk_eject
         //


            //
            // Scope: >flit
            //

               // Inject X when invalid.
               assign b_Yy[yy].b_Xx[xx].NETWK_EJECT_Flit_data_a1 = `WHEN(b_Yy[yy].Xx_NETWK_EJECT_trans_valid_a1[xx]) b_Yy[yy].b_Xx[xx].w_NETWK_EJECT_Flit_data_a1;
               // Inject X when invalid.
               assign b_Yy[yy].b_Xx[xx].NETWK_EJECT_Flit_dest_x_a1 = `WHEN(b_Yy[yy].Xx_NETWK_EJECT_trans_valid_a1[xx]) b_Yy[yy].b_Xx[xx].w_NETWK_EJECT_Flit_dest_x_a1;
               // Inject X when invalid.
               assign b_Yy[yy].b_Xx[xx].NETWK_EJECT_Flit_dest_y_a1 = `WHEN(b_Yy[yy].Xx_NETWK_EJECT_trans_valid_a1[xx]) b_Yy[yy].b_Xx[xx].w_NETWK_EJECT_Flit_dest_y_a1;
               // Inject X when invalid.
               assign b_Yy[yy].b_Xx[xx].NETWK_EJECT_Flit_flit_cnt_a1 = `WHEN(b_Yy[yy].Xx_NETWK_EJECT_trans_valid_a1[xx]) b_Yy[yy].b_Xx[xx].w_NETWK_EJECT_Flit_flit_cnt_a1;
               // Inject X when invalid.
               assign b_Yy[yy].Xx_NETWK_EJECT_Flit_head_a1[xx] = `WHEN(b_Yy[yy].Xx_NETWK_EJECT_trans_valid_a1[xx]) b_Yy[yy].w_Xx_NETWK_EJECT_Flit_head_a1[xx];
               // Inject X when invalid.
               assign b_Yy[yy].b_Xx[xx].NETWK_EJECT_Flit_pkt_cnt_a1 = `WHEN(b_Yy[yy].Xx_NETWK_EJECT_trans_valid_a1[xx]) b_Yy[yy].b_Xx[xx].w_NETWK_EJECT_Flit_pkt_cnt_a1;
               // Inject X when invalid.
               assign b_Yy[yy].b_Xx[xx].NETWK_EJECT_Flit_src_x_a1 = `WHEN(b_Yy[yy].Xx_NETWK_EJECT_trans_valid_a1[xx]) b_Yy[yy].b_Xx[xx].w_NETWK_EJECT_Flit_src_x_a1;
               // Inject X when invalid.
               assign b_Yy[yy].b_Xx[xx].NETWK_EJECT_Flit_src_y_a1 = `WHEN(b_Yy[yy].Xx_NETWK_EJECT_trans_valid_a1[xx]) b_Yy[yy].b_Xx[xx].w_NETWK_EJECT_Flit_src_y_a1;
               // Inject X when invalid.
               assign b_Yy[yy].Xx_NETWK_EJECT_Flit_tail_a1[xx] = `WHEN(b_Yy[yy].Xx_NETWK_EJECT_trans_valid_a1[xx]) b_Yy[yy].w_Xx_NETWK_EJECT_Flit_tail_a1[xx];
               // Inject X when invalid.
               assign b_Yy[yy].b_Xx[xx].NETWK_EJECT_Flit_vc_a1 = `WHEN(b_Yy[yy].Xx_NETWK_EJECT_trans_valid_a1[xx]) b_Yy[yy].b_Xx[xx].w_NETWK_EJECT_Flit_vc_a1;



         //
         // Scope: |netwk_inject
         //

            // Staging of $fifo_trans_avail.
            always_ff @(posedge clk) b_Yy[yy].Xx_NETWK_INJECT_fifo_trans_avail_a1[xx] <= b_Yy[yy].Xx_NETWK_INJECT_fifo_trans_avail_a0[xx];


            //
            // Scope: >fifos_out
            //

               // Staging of $data.
               always_ff @(posedge clkP_Yy_Xx_NETWK_INJECT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].b_Xx[xx].NETWK_INJECT_FifosOut_data_a1[7:0] <= b_Yy[yy].b_Xx[xx].w_NETWK_INJECT_FifosOut_data_a0[7:0];

               // Staging of $dest_x.
               always_ff @(posedge clkP_Yy_Xx_NETWK_INJECT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].b_Xx[xx].NETWK_INJECT_FifosOut_dest_x_a1[1-1:0] <= b_Yy[yy].b_Xx[xx].w_NETWK_INJECT_FifosOut_dest_x_a0[1-1:0];

               // Staging of $dest_y.
               always_ff @(posedge clkP_Yy_Xx_NETWK_INJECT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].b_Xx[xx].NETWK_INJECT_FifosOut_dest_y_a1[1-1:0] <= b_Yy[yy].b_Xx[xx].w_NETWK_INJECT_FifosOut_dest_y_a0[1-1:0];

               // Staging of $flit_cnt.
               always_ff @(posedge clkP_Yy_Xx_NETWK_INJECT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].b_Xx[xx].NETWK_INJECT_FifosOut_flit_cnt_a1[3:0] <= b_Yy[yy].b_Xx[xx].w_NETWK_INJECT_FifosOut_flit_cnt_a0[3:0];

               // Staging of $head.
               always_ff @(posedge clkP_Yy_Xx_NETWK_INJECT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].Xx_NETWK_INJECT_FifosOut_head_a1[xx] <= b_Yy[yy].w_Xx_NETWK_INJECT_FifosOut_head_a0[xx];

               // Staging of $pkt_cnt.
               always_ff @(posedge clkP_Yy_Xx_NETWK_INJECT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].b_Xx[xx].NETWK_INJECT_FifosOut_pkt_cnt_a1[7:0] <= b_Yy[yy].b_Xx[xx].w_NETWK_INJECT_FifosOut_pkt_cnt_a0[7:0];

               // Staging of $src_x.
               always_ff @(posedge clkP_Yy_Xx_NETWK_INJECT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].b_Xx[xx].NETWK_INJECT_FifosOut_src_x_a1[1-1:0] <= b_Yy[yy].b_Xx[xx].w_NETWK_INJECT_FifosOut_src_x_a0[1-1:0];

               // Staging of $src_y.
               always_ff @(posedge clkP_Yy_Xx_NETWK_INJECT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].b_Xx[xx].NETWK_INJECT_FifosOut_src_y_a1[1-1:0] <= b_Yy[yy].b_Xx[xx].w_NETWK_INJECT_FifosOut_src_y_a0[1-1:0];

               // Staging of $tail.
               always_ff @(posedge clkP_Yy_Xx_NETWK_INJECT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].Xx_NETWK_INJECT_FifosOut_tail_a1[xx] <= b_Yy[yy].w_Xx_NETWK_INJECT_FifosOut_tail_a0[xx];

               // Staging of $vc.
               always_ff @(posedge clkP_Yy_Xx_NETWK_INJECT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].b_Xx[xx].NETWK_INJECT_FifosOut_vc_a1[2-1:0] <= b_Yy[yy].b_Xx[xx].w_NETWK_INJECT_FifosOut_vc_a0[2-1:0];



            //
            // Scope: >flit
            //

               // Inject X when invalid.
               assign b_Yy[yy].b_Xx[xx].NETWK_INJECT_Flit_data_a1 = `WHEN(b_Yy[yy].Xx_NETWK_INJECT_trans_valid_a1[xx]) b_Yy[yy].b_Xx[xx].w_NETWK_INJECT_Flit_data_a1;
               // Inject X when invalid.
               assign b_Yy[yy].b_Xx[xx].NETWK_INJECT_Flit_dest_x_a1 = `WHEN(b_Yy[yy].Xx_NETWK_INJECT_trans_valid_a1[xx]) b_Yy[yy].b_Xx[xx].w_NETWK_INJECT_Flit_dest_x_a1;
               // Inject X when invalid.
               assign b_Yy[yy].b_Xx[xx].NETWK_INJECT_Flit_dest_y_a1 = `WHEN(b_Yy[yy].Xx_NETWK_INJECT_trans_valid_a1[xx]) b_Yy[yy].b_Xx[xx].w_NETWK_INJECT_Flit_dest_y_a1;
               // Inject X when invalid.
               assign b_Yy[yy].b_Xx[xx].NETWK_INJECT_Flit_flit_cnt_a1 = `WHEN(b_Yy[yy].Xx_NETWK_INJECT_trans_valid_a1[xx]) b_Yy[yy].b_Xx[xx].w_NETWK_INJECT_Flit_flit_cnt_a1;
               // Inject X when invalid.
               assign b_Yy[yy].Xx_NETWK_INJECT_Flit_head_a1[xx] = `WHEN(b_Yy[yy].Xx_NETWK_INJECT_trans_valid_a1[xx]) b_Yy[yy].w_Xx_NETWK_INJECT_Flit_head_a1[xx];
               // Inject X when invalid.
               assign b_Yy[yy].b_Xx[xx].NETWK_INJECT_Flit_pkt_cnt_a1 = `WHEN(b_Yy[yy].Xx_NETWK_INJECT_trans_valid_a1[xx]) b_Yy[yy].b_Xx[xx].w_NETWK_INJECT_Flit_pkt_cnt_a1;
               // Inject X when invalid.
               assign b_Yy[yy].b_Xx[xx].NETWK_INJECT_Flit_src_x_a1 = `WHEN(b_Yy[yy].Xx_NETWK_INJECT_trans_valid_a1[xx]) b_Yy[yy].b_Xx[xx].w_NETWK_INJECT_Flit_src_x_a1;
               // Inject X when invalid.
               assign b_Yy[yy].b_Xx[xx].NETWK_INJECT_Flit_src_y_a1 = `WHEN(b_Yy[yy].Xx_NETWK_INJECT_trans_valid_a1[xx]) b_Yy[yy].b_Xx[xx].w_NETWK_INJECT_Flit_src_y_a1;
               // Inject X when invalid.
               assign b_Yy[yy].Xx_NETWK_INJECT_Flit_tail_a1[xx] = `WHEN(b_Yy[yy].Xx_NETWK_INJECT_trans_valid_a1[xx]) b_Yy[yy].w_Xx_NETWK_INJECT_Flit_tail_a1[xx];
               // Inject X when invalid.
               assign b_Yy[yy].b_Xx[xx].NETWK_INJECT_Flit_vc_a1 = `WHEN(b_Yy[yy].Xx_NETWK_INJECT_trans_valid_a1[xx]) b_Yy[yy].b_Xx[xx].w_NETWK_INJECT_Flit_vc_a1;



         //
         // Scope: |tb_gen
         //

            // Staging of $FlitCnt.
            always_ff @(posedge clkF_Yy_Xx_TB_GEN_reset_or_trans_valid_a2[yy][xx]) Yy[yy].Xx[xx].TB_GEN_FlitCnt_a1[3:0] <= Yy[yy].Xx[xx].w_TB_GEN_FlitCnt_a0[3:0];

            // Staging of $MidPacket.
            always_ff @(posedge clk) Yy[yy].Xx_TB_GEN_MidPacket_a1[xx] <= Yy[yy].Xx_TB_GEN_MidPacket_a0[xx];

            // Staging of $PktCnt.
            always_ff @(posedge clkF_Yy_Xx_TB_GEN_reset_or_head_a2[yy][xx]) Yy[yy].Xx[xx].TB_GEN_PktCnt_a1[7:0] <= Yy[yy].Xx[xx].w_TB_GEN_PktCnt_a0[7:0];


            //
            // Scope: >flit
            //

               // Inject X when invalid.
               assign Yy[yy].Xx[xx].TB_GEN_Flit_data_a1 = `WHEN(Yy[yy].Xx_TB_GEN_trans_valid_a1[xx]) Yy[yy].Xx[xx].w_TB_GEN_Flit_data_a1;
               // Inject X when invalid.
               assign Yy_Xx_TB_GEN_Flit_dest_x_a1[yy][xx] = `WHEN(Yy[yy].Xx_TB_GEN_trans_valid_a1[xx]) w_Yy_Xx_TB_GEN_Flit_dest_x_a1[yy][xx];
               // Staging of $dest_x.
               always_ff @(posedge clkP_Yy_Xx_TB_GEN_trans_valid_a2[yy][xx]) Yy_Xx_TB_GEN_Flit_dest_x_a2[yy][xx][1-1:0] <= Yy_Xx_TB_GEN_Flit_dest_x_a1[yy][xx][1-1:0];

               // Inject X when invalid.
               assign Yy[yy].Xx[xx].TB_GEN_Flit_dest_x_rand_a1 = `WHEN(Yy[yy].Xx_TB_GEN_trans_valid_a1[xx]) Yy[yy].Xx[xx].w_TB_GEN_Flit_dest_x_rand_a1;
               // Inject X when invalid.
               assign Yy_Xx_TB_GEN_Flit_dest_y_a1[yy][xx] = `WHEN(Yy[yy].Xx_TB_GEN_trans_valid_a1[xx]) w_Yy_Xx_TB_GEN_Flit_dest_y_a1[yy][xx];
               // Staging of $dest_y.
               always_ff @(posedge clkP_Yy_Xx_TB_GEN_trans_valid_a2[yy][xx]) Yy_Xx_TB_GEN_Flit_dest_y_a2[yy][xx][1-1:0] <= Yy_Xx_TB_GEN_Flit_dest_y_a1[yy][xx][1-1:0];

               // Inject X when invalid.
               assign Yy[yy].Xx[xx].TB_GEN_Flit_dest_y_rand_a1 = `WHEN(Yy[yy].Xx_TB_GEN_trans_valid_a1[xx]) Yy[yy].Xx[xx].w_TB_GEN_Flit_dest_y_rand_a1;
               // Inject X when invalid.
               assign Yy_Xx_TB_GEN_Flit_flit_cnt_a1[yy][xx] = `WHEN(Yy[yy].Xx_TB_GEN_trans_valid_a1[xx]) w_Yy_Xx_TB_GEN_Flit_flit_cnt_a1[yy][xx];
               // Staging of $flit_cnt.
               always_ff @(posedge clkP_Yy_Xx_TB_GEN_trans_valid_a2[yy][xx]) Yy_Xx_TB_GEN_Flit_flit_cnt_a2[yy][xx][3:0] <= Yy_Xx_TB_GEN_Flit_flit_cnt_a1[yy][xx][3:0];

               // Inject X when invalid.
               assign Yy[yy].Xx_TB_GEN_Flit_head_a1[xx] = `WHEN(Yy[yy].Xx_TB_GEN_trans_valid_a1[xx]) Yy[yy].w_Xx_TB_GEN_Flit_head_a1[xx];
               // Inject X when invalid.
               assign Yy_Xx_TB_GEN_Flit_pkt_cnt_a1[yy][xx] = `WHEN(Yy[yy].Xx_TB_GEN_trans_valid_a1[xx]) w_Yy_Xx_TB_GEN_Flit_pkt_cnt_a1[yy][xx];
               // Staging of $pkt_cnt.
               always_ff @(posedge clkP_Yy_Xx_TB_GEN_trans_valid_a2[yy][xx]) Yy_Xx_TB_GEN_Flit_pkt_cnt_a2[yy][xx][7:0] <= Yy_Xx_TB_GEN_Flit_pkt_cnt_a1[yy][xx][7:0];

               // Inject X when invalid.
               assign Yy_Xx_TB_GEN_Flit_src_x_a1[yy][xx] = `WHEN(Yy[yy].Xx_TB_GEN_trans_valid_a1[xx]) w_Yy_Xx_TB_GEN_Flit_src_x_a1[yy][xx];
               // Staging of $src_x.
               always_ff @(posedge clkP_Yy_Xx_TB_GEN_trans_valid_a2[yy][xx]) Yy_Xx_TB_GEN_Flit_src_x_a2[yy][xx][1-1:0] <= Yy_Xx_TB_GEN_Flit_src_x_a1[yy][xx][1-1:0];

               // Inject X when invalid.
               assign Yy_Xx_TB_GEN_Flit_src_y_a1[yy][xx] = `WHEN(Yy[yy].Xx_TB_GEN_trans_valid_a1[xx]) w_Yy_Xx_TB_GEN_Flit_src_y_a1[yy][xx];
               // Staging of $src_y.
               always_ff @(posedge clkP_Yy_Xx_TB_GEN_trans_valid_a2[yy][xx]) Yy_Xx_TB_GEN_Flit_src_y_a2[yy][xx][1-1:0] <= Yy_Xx_TB_GEN_Flit_src_y_a1[yy][xx][1-1:0];

               // Inject X when invalid.
               assign Yy[yy].Xx_TB_GEN_Flit_tail_a1[xx] = `WHEN(Yy[yy].Xx_TB_GEN_trans_valid_a1[xx]) Yy[yy].w_Xx_TB_GEN_Flit_tail_a1[xx];
               // Inject X when invalid.
               assign Yy_Xx_TB_GEN_Flit_vc_a1[yy][xx] = `WHEN(Yy[yy].Xx_TB_GEN_trans_valid_a1[xx]) w_Yy_Xx_TB_GEN_Flit_vc_a1[yy][xx];
               // Staging of $vc.
               always_ff @(posedge clkP_Yy_Xx_TB_GEN_trans_valid_a2[yy][xx]) Yy_Xx_TB_GEN_Flit_vc_a2[yy][xx][2-1:0] <= Yy_Xx_TB_GEN_Flit_vc_a1[yy][xx][2-1:0];




         //
         // Scope: |tb_out
         //

            // Staging of $fifo_trans_avail.
            always_ff @(posedge clk) b_Yy[yy].Xx_TB_OUT_fifo_trans_avail_a1[xx] <= b_Yy[yy].Xx_TB_OUT_fifo_trans_avail_a0[xx];

            // Staging of $trans_valid.
            always_ff @(posedge clk) b_Yy[yy].Xx_TB_OUT_trans_valid_a2[xx] <= b_Yy[yy].Xx_TB_OUT_trans_valid_a1[xx];


            //
            // Scope: >fifos_out
            //

               // Staging of $data.
               always_ff @(posedge clkP_Yy_Xx_TB_OUT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].b_Xx[xx].TB_OUT_FifosOut_data_a1[7:0] <= b_Yy[yy].b_Xx[xx].w_TB_OUT_FifosOut_data_a0[7:0];

               // Staging of $dest_x.
               always_ff @(posedge clkP_Yy_Xx_TB_OUT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].b_Xx[xx].TB_OUT_FifosOut_dest_x_a1[1-1:0] <= b_Yy[yy].b_Xx[xx].w_TB_OUT_FifosOut_dest_x_a0[1-1:0];

               // Staging of $dest_y.
               always_ff @(posedge clkP_Yy_Xx_TB_OUT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].b_Xx[xx].TB_OUT_FifosOut_dest_y_a1[1-1:0] <= b_Yy[yy].b_Xx[xx].w_TB_OUT_FifosOut_dest_y_a0[1-1:0];

               // Staging of $flit_cnt.
               always_ff @(posedge clkP_Yy_Xx_TB_OUT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].b_Xx[xx].TB_OUT_FifosOut_flit_cnt_a1[3:0] <= b_Yy[yy].b_Xx[xx].w_TB_OUT_FifosOut_flit_cnt_a0[3:0];

               // Staging of $head.
               always_ff @(posedge clkP_Yy_Xx_TB_OUT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].Xx_TB_OUT_FifosOut_head_a1[xx] <= b_Yy[yy].w_Xx_TB_OUT_FifosOut_head_a0[xx];

               // Staging of $pkt_cnt.
               always_ff @(posedge clkP_Yy_Xx_TB_OUT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].b_Xx[xx].TB_OUT_FifosOut_pkt_cnt_a1[7:0] <= b_Yy[yy].b_Xx[xx].w_TB_OUT_FifosOut_pkt_cnt_a0[7:0];

               // Staging of $src_x.
               always_ff @(posedge clkP_Yy_Xx_TB_OUT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].b_Xx[xx].TB_OUT_FifosOut_src_x_a1[1-1:0] <= b_Yy[yy].b_Xx[xx].w_TB_OUT_FifosOut_src_x_a0[1-1:0];

               // Staging of $src_y.
               always_ff @(posedge clkP_Yy_Xx_TB_OUT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].b_Xx[xx].TB_OUT_FifosOut_src_y_a1[1-1:0] <= b_Yy[yy].b_Xx[xx].w_TB_OUT_FifosOut_src_y_a0[1-1:0];

               // Staging of $tail.
               always_ff @(posedge clkP_Yy_Xx_TB_OUT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].Xx_TB_OUT_FifosOut_tail_a1[xx] <= b_Yy[yy].w_Xx_TB_OUT_FifosOut_tail_a0[xx];

               // Staging of $vc.
               always_ff @(posedge clkP_Yy_Xx_TB_OUT_FifosOut_fifo_trans_avail_a1[yy][xx]) b_Yy[yy].b_Xx[xx].TB_OUT_FifosOut_vc_a1[2-1:0] <= b_Yy[yy].b_Xx[xx].w_TB_OUT_FifosOut_vc_a0[2-1:0];



            //
            // Scope: >flit
            //

               // Inject X when invalid.
               assign b_Yy[yy].b_Xx[xx].TB_OUT_Flit_data_a1 = `WHEN(b_Yy[yy].Xx_TB_OUT_trans_valid_a1[xx]) b_Yy[yy].b_Xx[xx].w_TB_OUT_Flit_data_a1;
               // Staging of $dest_x.
               always_ff @(posedge clkP_Yy_Xx_TB_OUT_trans_valid_a2[yy][xx]) Yy_Xx_TB_OUT_Flit_dest_x_a2[yy][xx][1-1:0] <= w_Yy_Xx_TB_OUT_Flit_dest_x_a1[yy][xx][1-1:0];

               // Staging of $dest_y.
               always_ff @(posedge clkP_Yy_Xx_TB_OUT_trans_valid_a2[yy][xx]) Yy_Xx_TB_OUT_Flit_dest_y_a2[yy][xx][1-1:0] <= w_Yy_Xx_TB_OUT_Flit_dest_y_a1[yy][xx][1-1:0];

               // Staging of $flit_cnt.
               always_ff @(posedge clkP_Yy_Xx_TB_OUT_trans_valid_a2[yy][xx]) Yy_Xx_TB_OUT_Flit_flit_cnt_a2[yy][xx][3:0] <= w_Yy_Xx_TB_OUT_Flit_flit_cnt_a1[yy][xx][3:0];

               // Inject X when invalid.
               assign b_Yy[yy].Xx_TB_OUT_Flit_head_a1[xx] = `WHEN(b_Yy[yy].Xx_TB_OUT_trans_valid_a1[xx]) b_Yy[yy].w_Xx_TB_OUT_Flit_head_a1[xx];
               // Staging of $pkt_cnt.
               always_ff @(posedge clkP_Yy_Xx_TB_OUT_trans_valid_a2[yy][xx]) Yy_Xx_TB_OUT_Flit_pkt_cnt_a2[yy][xx][7:0] <= w_Yy_Xx_TB_OUT_Flit_pkt_cnt_a1[yy][xx][7:0];

               // Staging of $src_x.
               always_ff @(posedge clkP_Yy_Xx_TB_OUT_trans_valid_a2[yy][xx]) Yy_Xx_TB_OUT_Flit_src_x_a2[yy][xx][1-1:0] <= w_Yy_Xx_TB_OUT_Flit_src_x_a1[yy][xx][1-1:0];

               // Staging of $src_y.
               always_ff @(posedge clkP_Yy_Xx_TB_OUT_trans_valid_a2[yy][xx]) Yy_Xx_TB_OUT_Flit_src_y_a2[yy][xx][1-1:0] <= w_Yy_Xx_TB_OUT_Flit_src_y_a1[yy][xx][1-1:0];

               // Inject X when invalid.
               assign b_Yy[yy].Xx_TB_OUT_Flit_tail_a1[xx] = `WHEN(b_Yy[yy].Xx_TB_OUT_trans_valid_a1[xx]) b_Yy[yy].w_Xx_TB_OUT_Flit_tail_a1[xx];
               // Staging of $vc.
               always_ff @(posedge clkP_Yy_Xx_TB_OUT_trans_valid_a2[yy][xx]) Yy_Xx_TB_OUT_Flit_vc_a2[yy][xx][2-1:0] <= w_Yy_Xx_TB_OUT_Flit_vc_a1[yy][xx][2-1:0];



      end
   end

   //
   // Scope: |reset
   //

      // Staging of $reset.
      always_ff @(posedge clk) RESET_reset_a0 <= RESET_reset_n1;
      always_ff @(posedge clk) RESET_reset_a1 <= RESET_reset_a0;



   //
   // Scope: |tb_gen
   //

      // Staging of $CycCnt.
      always_ff @(posedge clk) TB_GEN_CycCnt_n1[15:0] <= TB_GEN_CycCnt_n2[15:0];
      always_ff @(posedge clk) TB_GEN_CycCnt_a0[15:0] <= TB_GEN_CycCnt_n1[15:0];
      always_ff @(posedge clk) TB_GEN_CycCnt_a1[15:0] <= TB_GEN_CycCnt_a0[15:0];
      always_ff @(posedge clk) TB_GEN_CycCnt_a2[15:0] <= TB_GEN_CycCnt_a1[15:0];

      // Staging of $inj_cnt.
      always_ff @(posedge clk) TB_GEN_inj_cnt_a2[(1 + 1)-1:0] <= TB_GEN_inj_cnt_a1[(1 + 1)-1:0];



   //
   // Scope: |tb_out
   //

      // Staging of $FlitsInFlight.
      always_ff @(posedge clk) TB_OUT_FlitsInFlight_a2[31:0] <= TB_OUT_FlitsInFlight_a1[31:0];

      // Staging of $reset.
      always_ff @(posedge clk) TB_OUT_reset_a2 <= TB_OUT_reset_a1;





//
// Gated clocks.
//



   //
   // Scope: >yy[1:0]
   //
   for (yy = 0; yy <= 1; yy++) begin : clk_Yy

      //
      // Scope: >xx[1:0]
      //
      for (xx = 0; xx <= 1; xx++) begin : clk_Xx

         //
         // Scope: |netwk_inject
         //


            //
            // Scope: >fifos_out
            //

               clk_gate gen_clkP_Yy_Xx_NETWK_INJECT_FifosOut_fifo_trans_avail_a1(clkP_Yy_Xx_NETWK_INJECT_FifosOut_fifo_trans_avail_a1[yy][xx], clk, 1'b1, (b_Yy[yy].Xx_NETWK_INJECT_FifosOut_fifo_trans_avail_a0[xx] ? 1'b1 : 1'bx), 1'b0);



         //
         // Scope: |tb_gen
         //

            clk_gate gen_clkF_Yy_Xx_TB_GEN_reset_or_head_a2(clkF_Yy_Xx_TB_GEN_reset_or_head_a2[yy][xx], clk, Yy[yy].Xx_TB_GEN_reset_or_head_a1[xx], 1'b1, 1'b0);
            clk_gate gen_clkF_Yy_Xx_TB_GEN_reset_or_trans_valid_a2(clkF_Yy_Xx_TB_GEN_reset_or_trans_valid_a2[yy][xx], clk, Yy[yy].Xx_TB_GEN_reset_or_trans_valid_a1[xx], 1'b1, 1'b0);
            clk_gate gen_clkP_Yy_Xx_TB_GEN_trans_valid_a2(clkP_Yy_Xx_TB_GEN_trans_valid_a2[yy][xx], clk, 1'b1, (Yy[yy].Xx_TB_GEN_trans_valid_a1[xx] ? 1'b1 : 1'bx), 1'b0);


         //
         // Scope: |tb_out
         //

            clk_gate gen_clkP_Yy_Xx_TB_OUT_trans_valid_a2(clkP_Yy_Xx_TB_OUT_trans_valid_a2[yy][xx], clk, 1'b1, (b_Yy[yy].Xx_TB_OUT_trans_valid_a1[xx] ? 1'b1 : 1'bx), 1'b0);

            //
            // Scope: >fifos_out
            //

               clk_gate gen_clkP_Yy_Xx_TB_OUT_FifosOut_fifo_trans_avail_a1(clkP_Yy_Xx_TB_OUT_FifosOut_fifo_trans_avail_a1[yy][xx], clk, 1'b1, (b_Yy[yy].Xx_TB_OUT_FifosOut_fifo_trans_avail_a0[xx] ? 1'b1 : 1'bx), 1'b0);


      end
   end


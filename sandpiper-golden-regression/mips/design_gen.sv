// Generated by SandPiper(TM).
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)


// For X injection on assignments, disableable using `define SP_PHYS.
`ifdef WHEN
   $warning("WHEN macro redefined.");
`endif
`ifdef SP_PHYS
   `define WHEN(valid_sig)
`else
   `define WHEN(valid_sig) !valid_sig ? 'x :
`endif





//
// Signals declared top-level.
//

// For >pipelined|cpu$Pc.
logic [WIDTH-1:0] Pipelined_CPU_Pc_a0;
logic [WIDTH-1:0] Pipelined_CPU_Pc_a1;

// For >pipelined|cpu$alu_control.
logic [2:0] w_Pipelined_CPU_alu_control_a6 /* without X injection for "when" condition */;
logic [2:0] Pipelined_CPU_alu_control_a6;

// For >pipelined|cpu$alu_op.
logic [1:0] w_Pipelined_CPU_alu_op_a6 /* without X injection for "when" condition */;
logic [1:0] Pipelined_CPU_alu_op_a6;

// For >pipelined|cpu$alu_out.
logic [WIDTH-1:0] w_Pipelined_CPU_alu_out_a6 /* without X injection for "when" condition */;
logic [WIDTH-1:0] Pipelined_CPU_alu_out_a6;
logic [WIDTH-1:0] Pipelined_CPU_alu_out_a7;

// For >pipelined|cpu$alu_valid.
logic Pipelined_CPU_alu_valid_a6;

// For >pipelined|cpu$beq_target_calc.
logic Pipelined_CPU_beq_target_calc_a6;
logic Pipelined_CPU_beq_target_calc_a7;

// For >pipelined|cpu$beq_type.
logic Pipelined_CPU_beq_type_a5;
logic Pipelined_CPU_beq_type_a6;

// For >pipelined|cpu$beq_update_pc.
logic Pipelined_CPU_beq_update_pc_a7;

// For >pipelined|cpu$fetch.
logic Pipelined_CPU_fetch_a1;

// For >pipelined|cpu$funct.
logic [5:0] w_Pipelined_CPU_funct_a5;
logic [5:0] Pipelined_CPU_funct_a6;

// For >pipelined|cpu$imm.
logic [7:0] w_Pipelined_CPU_imm_a5;
logic [7:0] Pipelined_CPU_imm_a6;

// For >pipelined|cpu$imm_x4.
logic [7:0] w_Pipelined_CPU_imm_x4_a5 /* without X injection for "when" condition */;
logic [7:0] Pipelined_CPU_imm_x4_a5;
logic [7:0] Pipelined_CPU_imm_x4_a6;

// For >pipelined|cpu$instr.
logic [31:0] w_Pipelined_CPU_instr_a4;
logic [31:0] Pipelined_CPU_instr_a5;
logic [31:11] Pipelined_CPU_instr_a6;
logic [31:11] Pipelined_CPU_instr_a7;
logic [31:16] Pipelined_CPU_instr_a8;

// For >pipelined|cpu$jtype.
logic Pipelined_CPU_jtype_a5;
logic Pipelined_CPU_jtype_a6;

// For >pipelined|cpu$lb_type.
logic Pipelined_CPU_lb_type_a5;
logic Pipelined_CPU_lb_type_a6;
logic Pipelined_CPU_lb_type_a7;
logic Pipelined_CPU_lb_type_a8;

// For >pipelined|cpu$mem_read.
logic Pipelined_CPU_mem_read_a1;
logic Pipelined_CPU_mem_read_a2;
logic Pipelined_CPU_mem_read_a3;

// For >pipelined|cpu$mem_type.
logic Pipelined_CPU_mem_type_a5;
logic Pipelined_CPU_mem_type_a6;
logic Pipelined_CPU_mem_type_a7;

// For >pipelined|cpu$memdata.
logic [WIDTH-1:0] w_Pipelined_CPU_memdata_a1 /* without X injection for "when" condition */;
logic [WIDTH-1:0] Pipelined_CPU_memdata_a1;
logic [WIDTH-1:0] Pipelined_CPU_memdata_a2;
logic [WIDTH-1:0] Pipelined_CPU_memdata_a3;
logic [WIDTH-1:0] Pipelined_CPU_memdata_a4;

// For >pipelined|cpu$op.
logic [5:0] w_Pipelined_CPU_op_a5 /* without X injection for "when" condition */;
logic [5:0] Pipelined_CPU_op_a5;

// For >pipelined|cpu$ra1.
logic [REGBITS-1:0] Pipelined_CPU_ra1_a5;

// For >pipelined|cpu$ra2.
logic [REGBITS-1:0] Pipelined_CPU_ra2_a5;

// For >pipelined|cpu$rd1.
logic [WIDTH-1:0] Pipelined_CPU_rd1_a5;
logic [WIDTH-1:0] Pipelined_CPU_rd1_a6;

// For >pipelined|cpu$rd2.
logic [WIDTH-1:0] Pipelined_CPU_rd2_a5;
logic [WIDTH-1:0] Pipelined_CPU_rd2_a6;
logic [WIDTH-1:0] Pipelined_CPU_rd2_a7;

// For >pipelined|cpu$regwrite.
logic Pipelined_CPU_regwrite_a5;

// For >pipelined|cpu$reset.
logic Pipelined_CPU_reset_a0;
logic Pipelined_CPU_reset_a1;

// For >pipelined|cpu$rtype.
logic Pipelined_CPU_rtype_a5;
logic Pipelined_CPU_rtype_a6;
logic Pipelined_CPU_rtype_a7;

// For >pipelined|cpu$sb_type.
logic Pipelined_CPU_sb_type_a5;
logic Pipelined_CPU_sb_type_a6;
logic Pipelined_CPU_sb_type_a7;

// For >pipelined|cpu$src_a.
logic [WIDTH-1:0] w_Pipelined_CPU_src_a_a6 /* without X injection for "when" condition */;
logic [WIDTH-1:0] Pipelined_CPU_src_a_a6;

// For >pipelined|cpu$src_b.
logic [WIDTH-1:0] w_Pipelined_CPU_src_b_a6 /* without X injection for "when" condition */;
logic [WIDTH-1:0] Pipelined_CPU_src_b_a6;

// For >pipelined|cpu$valid_instr.
logic Pipelined_CPU_valid_instr_a0;
logic Pipelined_CPU_valid_instr_a1;
logic Pipelined_CPU_valid_instr_a2;
logic Pipelined_CPU_valid_instr_a3;
logic Pipelined_CPU_valid_instr_a4;
logic Pipelined_CPU_valid_instr_a5;
logic Pipelined_CPU_valid_instr_a6;
logic Pipelined_CPU_valid_instr_a7;

// For >pipelined|cpu$wa.
logic [REGBITS-1:0] w_Pipelined_CPU_wa_a5 /* without X injection for "when" condition */;
logic [REGBITS-1:0] Pipelined_CPU_wa_a5;

// For >pipelined|cpu$wd.
logic [WIDTH-1:0] w_Pipelined_CPU_wd_a5 /* without X injection for "when" condition */;
logic [WIDTH-1:0] Pipelined_CPU_wd_a5;

// For >pipelined|cpu$zero.
logic w_Pipelined_CPU_zero_a6 /* without X injection for "when" condition */;
logic Pipelined_CPU_zero_a6;

// For >unpipelined|cpu$Pc.
logic [WIDTH-1:0] Unpipelined_CPU_Pc_a0;
logic [WIDTH-1:0] Unpipelined_CPU_Pc_a1;

// For >unpipelined|cpu$alu_control.
logic [2:0] Unpipelined_CPU_alu_control_a6;

// For >unpipelined|cpu$alu_op.
logic [1:0] Unpipelined_CPU_alu_op_a6;

// For >unpipelined|cpu$alu_out.
logic [WIDTH-1:0] Unpipelined_CPU_alu_out_a6;
logic [WIDTH-1:0] Unpipelined_CPU_alu_out_a7;

// For >unpipelined|cpu$beq_target_calc.
logic Unpipelined_CPU_beq_target_calc_a6;
logic Unpipelined_CPU_beq_target_calc_a7;

// For >unpipelined|cpu$beq_type.
logic Unpipelined_CPU_beq_type_a5;

// For >unpipelined|cpu$beq_update_pc.
logic Unpipelined_CPU_beq_update_pc_a7;

// For >unpipelined|cpu$fetch.
logic Unpipelined_CPU_fetch_a1;

// For >unpipelined|cpu$funct.
logic [5:0] Unpipelined_CPU_funct_a5;

// For >unpipelined|cpu$imm.
logic [7:0] Unpipelined_CPU_imm_a5;

// For >unpipelined|cpu$imm_x4.
logic [7:0] Unpipelined_CPU_imm_x4_a5;

// For >unpipelined|cpu$instr.
logic [31:0] Unpipelined_CPU_instr_a4;
logic [31:0] Unpipelined_CPU_instr_a5;

// For >unpipelined|cpu$jtype.
logic Unpipelined_CPU_jtype_a5;

// For >unpipelined|cpu$lb_type.
logic Unpipelined_CPU_lb_type_a5;
logic Unpipelined_CPU_lb_type_a6;
logic Unpipelined_CPU_lb_type_a7;

// For >unpipelined|cpu$mem_type.
logic Unpipelined_CPU_mem_type_a5;

// For >unpipelined|cpu$memdata.
logic [WIDTH-1:0] Unpipelined_CPU_memdata_a1;
logic [WIDTH-1:0] Unpipelined_CPU_memdata_a2;
logic [WIDTH-1:0] Unpipelined_CPU_memdata_a3;
logic [WIDTH-1:0] Unpipelined_CPU_memdata_a4;

// For >unpipelined|cpu$op.
logic [5:0] Unpipelined_CPU_op_a5;

// For >unpipelined|cpu$ra1.
logic [REGBITS-1:0] Unpipelined_CPU_ra1_a5;

// For >unpipelined|cpu$ra2.
logic [REGBITS-1:0] Unpipelined_CPU_ra2_a5;

// For >unpipelined|cpu$rd1.
logic [WIDTH-1:0] Unpipelined_CPU_rd1_a5;
logic [WIDTH-1:0] Unpipelined_CPU_rd1_a6;

// For >unpipelined|cpu$rd2.
logic [WIDTH-1:0] Unpipelined_CPU_rd2_a5;
logic [WIDTH-1:0] Unpipelined_CPU_rd2_a6;

// For >unpipelined|cpu$regwrite.
logic Unpipelined_CPU_regwrite_a5;

// For >unpipelined|cpu$reset.
logic Unpipelined_CPU_reset_a0;
logic Unpipelined_CPU_reset_a1;

// For >unpipelined|cpu$rtype.
logic Unpipelined_CPU_rtype_a5;

// For >unpipelined|cpu$sb_type.
logic Unpipelined_CPU_sb_type_a5;

// For >unpipelined|cpu$src_a.
logic [WIDTH-1:0] Unpipelined_CPU_src_a_a6;

// For >unpipelined|cpu$src_b.
logic [WIDTH-1:0] Unpipelined_CPU_src_b_a6;

// For >unpipelined|cpu$valid_instr.
logic Unpipelined_CPU_valid_instr_a0;
logic Unpipelined_CPU_valid_instr_a1;
logic Unpipelined_CPU_valid_instr_a2;
logic Unpipelined_CPU_valid_instr_a3;
logic Unpipelined_CPU_valid_instr_a4;
logic Unpipelined_CPU_valid_instr_a5;
logic Unpipelined_CPU_valid_instr_a6;
logic Unpipelined_CPU_valid_instr_a7;
logic Unpipelined_CPU_valid_instr_a8;

// For >unpipelined|cpu$wa.
logic [REGBITS-1:0] Unpipelined_CPU_wa_a5;

// For >unpipelined|cpu$wd.
logic [WIDTH-1:0] Unpipelined_CPU_wd_a5;

// For >unpipelined|cpu$zero.
logic Unpipelined_CPU_zero_a6;


//
// Scope: >pipelined
//

//
// Scope: >pipelined|cpu
//

// Clock signals.
logic clkP_Pipelined_CPU_alu_valid_a7 ;
logic clkP_Pipelined_CPU_mem_read_a2 ;
logic clkP_Pipelined_CPU_mem_read_a3 ;
logic clkP_Pipelined_CPU_mem_read_a4 ;
logic clkP_Pipelined_CPU_valid_instr_a5 ;
logic clkP_Pipelined_CPU_valid_instr_a6 ;
logic clkP_Pipelined_CPU_valid_instr_a7 ;
logic clkP_Pipelined_CPU_valid_instr_a8 ;



   //
   // Scope: >pipelined
   //


      //
      // Scope: |cpu
      //

         // Staging of $Pc.
         always_ff @(posedge clk) Pipelined_CPU_Pc_a1[WIDTH-1:0] <= Pipelined_CPU_Pc_a0[WIDTH-1:0];

         // Inject X when invalid.
         assign Pipelined_CPU_alu_control_a6 = `WHEN(Pipelined_CPU_alu_valid_a6) w_Pipelined_CPU_alu_control_a6;
         // Inject X when invalid.
         assign Pipelined_CPU_alu_op_a6 = `WHEN(Pipelined_CPU_alu_valid_a6) w_Pipelined_CPU_alu_op_a6;
         // Inject X when invalid.
         assign Pipelined_CPU_alu_out_a6 = `WHEN(Pipelined_CPU_alu_valid_a6) w_Pipelined_CPU_alu_out_a6;
         // Staging of $alu_out.
         always_ff @(posedge clkP_Pipelined_CPU_alu_valid_a7) Pipelined_CPU_alu_out_a7[WIDTH-1:0] <= Pipelined_CPU_alu_out_a6[WIDTH-1:0];

         // Staging of $beq_target_calc.
         always_ff @(posedge clk) Pipelined_CPU_beq_target_calc_a7 <= Pipelined_CPU_beq_target_calc_a6;

         // Staging of $beq_type.
         always_ff @(posedge clk) Pipelined_CPU_beq_type_a6 <= Pipelined_CPU_beq_type_a5;

         // Staging of $funct.
         always_ff @(posedge clkP_Pipelined_CPU_valid_instr_a6) Pipelined_CPU_funct_a6[5:0] <= w_Pipelined_CPU_funct_a5[5:0];

         // Staging of $imm.
         always_ff @(posedge clkP_Pipelined_CPU_valid_instr_a6) Pipelined_CPU_imm_a6[7:0] <= w_Pipelined_CPU_imm_a5[7:0];

         // Inject X when invalid.
         assign Pipelined_CPU_imm_x4_a5 = `WHEN(Pipelined_CPU_valid_instr_a5) w_Pipelined_CPU_imm_x4_a5;
         // Staging of $imm_x4.
         always_ff @(posedge clkP_Pipelined_CPU_valid_instr_a6) Pipelined_CPU_imm_x4_a6[7:0] <= Pipelined_CPU_imm_x4_a5[7:0];

         // Staging of $instr.
         always_ff @(posedge clkP_Pipelined_CPU_valid_instr_a5) Pipelined_CPU_instr_a5[31:0] <= w_Pipelined_CPU_instr_a4[31:0];
         always_ff @(posedge clkP_Pipelined_CPU_valid_instr_a6) Pipelined_CPU_instr_a6[31:11] <= Pipelined_CPU_instr_a5[31:11];
         always_ff @(posedge clkP_Pipelined_CPU_valid_instr_a7) Pipelined_CPU_instr_a7[31:11] <= Pipelined_CPU_instr_a6[31:11];
         always_ff @(posedge clkP_Pipelined_CPU_valid_instr_a8) Pipelined_CPU_instr_a8[31:16] <= Pipelined_CPU_instr_a7[31:16];

         // Staging of $jtype.
         always_ff @(posedge clk) Pipelined_CPU_jtype_a6 <= Pipelined_CPU_jtype_a5;

         // Staging of $lb_type.
         always_ff @(posedge clk) Pipelined_CPU_lb_type_a6 <= Pipelined_CPU_lb_type_a5;
         always_ff @(posedge clk) Pipelined_CPU_lb_type_a7 <= Pipelined_CPU_lb_type_a6;
         always_ff @(posedge clk) Pipelined_CPU_lb_type_a8 <= Pipelined_CPU_lb_type_a7;

         // Staging of $mem_read.
         always_ff @(posedge clk) Pipelined_CPU_mem_read_a2 <= Pipelined_CPU_mem_read_a1;
         always_ff @(posedge clk) Pipelined_CPU_mem_read_a3 <= Pipelined_CPU_mem_read_a2;

         // Staging of $mem_type.
         always_ff @(posedge clk) Pipelined_CPU_mem_type_a6 <= Pipelined_CPU_mem_type_a5;
         always_ff @(posedge clk) Pipelined_CPU_mem_type_a7 <= Pipelined_CPU_mem_type_a6;

         // Inject X when invalid.
         assign Pipelined_CPU_memdata_a1 = `WHEN(Pipelined_CPU_mem_read_a1) w_Pipelined_CPU_memdata_a1;
         // Staging of $memdata.
         always_ff @(posedge clkP_Pipelined_CPU_mem_read_a2) Pipelined_CPU_memdata_a2[WIDTH-1:0] <= Pipelined_CPU_memdata_a1[WIDTH-1:0];
         always_ff @(posedge clkP_Pipelined_CPU_mem_read_a3) Pipelined_CPU_memdata_a3[WIDTH-1:0] <= Pipelined_CPU_memdata_a2[WIDTH-1:0];
         always_ff @(posedge clkP_Pipelined_CPU_mem_read_a4) Pipelined_CPU_memdata_a4[WIDTH-1:0] <= Pipelined_CPU_memdata_a3[WIDTH-1:0];

         // Inject X when invalid.
         assign Pipelined_CPU_op_a5 = `WHEN(Pipelined_CPU_valid_instr_a5) w_Pipelined_CPU_op_a5;
         // Staging of $rd1.
         always_ff @(posedge clk) Pipelined_CPU_rd1_a6[WIDTH-1:0] <= Pipelined_CPU_rd1_a5[WIDTH-1:0];

         // Staging of $rd2.
         always_ff @(posedge clk) Pipelined_CPU_rd2_a6[WIDTH-1:0] <= Pipelined_CPU_rd2_a5[WIDTH-1:0];
         always_ff @(posedge clk) Pipelined_CPU_rd2_a7[WIDTH-1:0] <= Pipelined_CPU_rd2_a6[WIDTH-1:0];

         // Staging of $reset.
         always_ff @(posedge clk) Pipelined_CPU_reset_a1 <= Pipelined_CPU_reset_a0;

         // Staging of $rtype.
         always_ff @(posedge clk) Pipelined_CPU_rtype_a6 <= Pipelined_CPU_rtype_a5;
         always_ff @(posedge clk) Pipelined_CPU_rtype_a7 <= Pipelined_CPU_rtype_a6;

         // Staging of $sb_type.
         always_ff @(posedge clk) Pipelined_CPU_sb_type_a6 <= Pipelined_CPU_sb_type_a5;
         always_ff @(posedge clk) Pipelined_CPU_sb_type_a7 <= Pipelined_CPU_sb_type_a6;

         // Inject X when invalid.
         assign Pipelined_CPU_src_a_a6 = `WHEN(Pipelined_CPU_alu_valid_a6) w_Pipelined_CPU_src_a_a6;
         // Inject X when invalid.
         assign Pipelined_CPU_src_b_a6 = `WHEN(Pipelined_CPU_alu_valid_a6) w_Pipelined_CPU_src_b_a6;
         // Staging of $valid_instr.
         always_ff @(posedge clk) Pipelined_CPU_valid_instr_a1 <= Pipelined_CPU_valid_instr_a0;
         always_ff @(posedge clk) Pipelined_CPU_valid_instr_a2 <= Pipelined_CPU_valid_instr_a1;
         always_ff @(posedge clk) Pipelined_CPU_valid_instr_a3 <= Pipelined_CPU_valid_instr_a2;
         always_ff @(posedge clk) Pipelined_CPU_valid_instr_a4 <= Pipelined_CPU_valid_instr_a3;
         always_ff @(posedge clk) Pipelined_CPU_valid_instr_a5 <= Pipelined_CPU_valid_instr_a4;
         always_ff @(posedge clk) Pipelined_CPU_valid_instr_a6 <= Pipelined_CPU_valid_instr_a5;
         always_ff @(posedge clk) Pipelined_CPU_valid_instr_a7 <= Pipelined_CPU_valid_instr_a6;

         // Inject X when invalid.
         assign Pipelined_CPU_wa_a5 = `WHEN(Pipelined_CPU_regwrite_a5) w_Pipelined_CPU_wa_a5;
         // Inject X when invalid.
         assign Pipelined_CPU_wd_a5 = `WHEN(Pipelined_CPU_regwrite_a5) w_Pipelined_CPU_wd_a5;
         // Inject X when invalid.
         assign Pipelined_CPU_zero_a6 = `WHEN(Pipelined_CPU_alu_valid_a6) w_Pipelined_CPU_zero_a6;



   //
   // Scope: >unpipelined
   //


      //
      // Scope: |cpu
      //

         // Staging of $Pc.
         always_ff @(posedge clk) Unpipelined_CPU_Pc_a1[WIDTH-1:0] <= Unpipelined_CPU_Pc_a0[WIDTH-1:0];

         // Staging of $alu_out.
         always_ff @(posedge clk) Unpipelined_CPU_alu_out_a7[WIDTH-1:0] <= Unpipelined_CPU_alu_out_a6[WIDTH-1:0];

         // Staging of $beq_target_calc.
         always_ff @(posedge clk) Unpipelined_CPU_beq_target_calc_a7 <= Unpipelined_CPU_beq_target_calc_a6;

         // Staging of $instr.
         always_ff @(posedge clk) Unpipelined_CPU_instr_a5[31:0] <= Unpipelined_CPU_instr_a4[31:0];

         // Staging of $lb_type.
         always_ff @(posedge clk) Unpipelined_CPU_lb_type_a6 <= Unpipelined_CPU_lb_type_a5;
         always_ff @(posedge clk) Unpipelined_CPU_lb_type_a7 <= Unpipelined_CPU_lb_type_a6;

         // Staging of $memdata.
         always_ff @(posedge clk) Unpipelined_CPU_memdata_a2[WIDTH-1:0] <= Unpipelined_CPU_memdata_a1[WIDTH-1:0];
         always_ff @(posedge clk) Unpipelined_CPU_memdata_a3[WIDTH-1:0] <= Unpipelined_CPU_memdata_a2[WIDTH-1:0];
         always_ff @(posedge clk) Unpipelined_CPU_memdata_a4[WIDTH-1:0] <= Unpipelined_CPU_memdata_a3[WIDTH-1:0];

         // Staging of $rd1.
         always_ff @(posedge clk) Unpipelined_CPU_rd1_a6[WIDTH-1:0] <= Unpipelined_CPU_rd1_a5[WIDTH-1:0];

         // Staging of $rd2.
         always_ff @(posedge clk) Unpipelined_CPU_rd2_a6[WIDTH-1:0] <= Unpipelined_CPU_rd2_a5[WIDTH-1:0];

         // Staging of $reset.
         always_ff @(posedge clk) Unpipelined_CPU_reset_a1 <= Unpipelined_CPU_reset_a0;

         // Staging of $valid_instr.
         always_ff @(posedge clk) Unpipelined_CPU_valid_instr_a1 <= Unpipelined_CPU_valid_instr_a0;
         always_ff @(posedge clk) Unpipelined_CPU_valid_instr_a2 <= Unpipelined_CPU_valid_instr_a1;
         always_ff @(posedge clk) Unpipelined_CPU_valid_instr_a3 <= Unpipelined_CPU_valid_instr_a2;
         always_ff @(posedge clk) Unpipelined_CPU_valid_instr_a4 <= Unpipelined_CPU_valid_instr_a3;
         always_ff @(posedge clk) Unpipelined_CPU_valid_instr_a5 <= Unpipelined_CPU_valid_instr_a4;
         always_ff @(posedge clk) Unpipelined_CPU_valid_instr_a6 <= Unpipelined_CPU_valid_instr_a5;
         always_ff @(posedge clk) Unpipelined_CPU_valid_instr_a7 <= Unpipelined_CPU_valid_instr_a6;
         always_ff @(posedge clk) Unpipelined_CPU_valid_instr_a8 <= Unpipelined_CPU_valid_instr_a7;






//
// Gated clocks.
//



   //
   // Scope: >pipelined
   //


      //
      // Scope: |cpu
      //

         clk_gate gen_clkP_Pipelined_CPU_alu_valid_a7(clkP_Pipelined_CPU_alu_valid_a7, clk, 1'b1, (Pipelined_CPU_alu_valid_a6 ? 1'b1 : 1'bx), 1'b0);
         clk_gate gen_clkP_Pipelined_CPU_mem_read_a2(clkP_Pipelined_CPU_mem_read_a2, clk, 1'b1, (Pipelined_CPU_mem_read_a1 ? 1'b1 : 1'bx), 1'b0);
         clk_gate gen_clkP_Pipelined_CPU_mem_read_a3(clkP_Pipelined_CPU_mem_read_a3, clk, 1'b1, (Pipelined_CPU_mem_read_a2 ? 1'b1 : 1'bx), 1'b0);
         clk_gate gen_clkP_Pipelined_CPU_mem_read_a4(clkP_Pipelined_CPU_mem_read_a4, clk, 1'b1, (Pipelined_CPU_mem_read_a3 ? 1'b1 : 1'bx), 1'b0);
         clk_gate gen_clkP_Pipelined_CPU_valid_instr_a5(clkP_Pipelined_CPU_valid_instr_a5, clk, 1'b1, (Pipelined_CPU_valid_instr_a4 ? 1'b1 : 1'bx), 1'b0);
         clk_gate gen_clkP_Pipelined_CPU_valid_instr_a6(clkP_Pipelined_CPU_valid_instr_a6, clk, 1'b1, (Pipelined_CPU_valid_instr_a5 ? 1'b1 : 1'bx), 1'b0);
         clk_gate gen_clkP_Pipelined_CPU_valid_instr_a7(clkP_Pipelined_CPU_valid_instr_a7, clk, 1'b1, (Pipelined_CPU_valid_instr_a6 ? 1'b1 : 1'bx), 1'b0);
         clk_gate gen_clkP_Pipelined_CPU_valid_instr_a8(clkP_Pipelined_CPU_valid_instr_a8, clk, 1'b1, (Pipelined_CPU_valid_instr_a7 ? 1'b1 : 1'bx), 1'b0);




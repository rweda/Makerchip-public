// Generated by SandPiper(TM).
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)


genvar result;


//
// Signals declared top-level.
//

// For |calc$CycCnt.
logic [15:0] CALC_CycCnt_n2,
             CALC_CycCnt_n1,
             CALC_CycCnt_a0,
             CALC_CycCnt_a1,
             CALC_CycCnt_a2,
             CALC_CycCnt_a3,
             CALC_CycCnt_a4;

// For |calc$Error1.
logic w_CALC_Error1_a0 /* without recirculation for "when" condition */,
      CALC_Error1_a0,
      CALC_Error1_a1,
      CALC_Error1_a2,
      CALC_Error1_a3,
      CALC_Error1_a4;

// For |calc$Error2.
logic w_CALC_Error2_a0 /* without recirculation for "when" condition */,
      CALC_Error2_a0,
      CALC_Error2_a1,
      CALC_Error2_a2,
      CALC_Error2_a3,
      CALC_Error2_a4;

// For |calc$Error3.
logic w_CALC_Error3_a2 /* without recirculation for "when" condition */,
      CALC_Error3_a2,
      CALC_Error3_a3,
      CALC_Error3_a4;

// For |calc$aa.
logic [3:0] CALC_aa_a0,
            CALC_aa_a1,
            CALC_aa_a2,
            CALC_aa_a3,
            CALC_aa_a4,
            CALC_aa_a5,
            CALC_aa_a6,
            CALC_aa_a7;

// For |calc$aa_in.
logic [3:0] CALC_aa_in_a0,
            CALC_aa_in_a1;

// For |calc$bb.
logic [3:0] CALC_bb_a0,
            CALC_bb_a1,
            CALC_bb_a2,
            CALC_bb_a3,
            CALC_bb_a4,
            CALC_bb_a5,
            CALC_bb_a6,
            CALC_bb_a7;

// For |calc$bb_in.
logic [3:0] CALC_bb_in_a0,
            CALC_bb_in_a1;

// For |calc$calc_valid.
logic CALC_calc_valid_a0,
      CALC_calc_valid_a1,
      CALC_calc_valid_a2,
      CALC_calc_valid_a3,
      CALC_calc_valid_a4,
      CALC_calc_valid_a5,
      CALC_calc_valid_a6;

// For |calc$full_quotient.
logic [19:0] CALC_full_quotient_a1,
             CALC_full_quotient_a2,
             CALC_full_quotient_a3;

// For |calc$in_valid.
logic CALC_in_valid_a0,
      CALC_in_valid_a1;

// For |calc$iteration.
logic [1:0] CALC_iteration_a0,
            CALC_iteration_a1,
            CALC_iteration_a2;

// For |calc$last_iter.
logic CALC_last_iter_a0,
      CALC_last_iter_a1,
      CALC_last_iter_a2,
      CALC_last_iter_a3,
      CALC_last_iter_a4;

// For |calc$next_remainder.
logic [7:0] CALC_next_remainder_a2;
logic [3:0] CALC_next_remainder_a3;

// For |calc$odd.
logic CALC_odd_a0,
      CALC_odd_a1,
      CALC_odd_a2,
      CALC_odd_a3;

// For |calc$orig_aa.
logic [3:0] CALC_orig_aa_a1,
            CALC_orig_aa_a2,
            CALC_orig_aa_a3;

// For |calc$orig_bb.
logic [3:0] CALC_orig_bb_a1,
            CALC_orig_bb_a2,
            CALC_orig_bb_a3;

// For |calc$quotient.
logic [15:0] CALC_quotient_a3;

// For |calc$quotient_digit.
logic [7:0] CALC_quotient_digit_a1;
logic [3:0] CALC_quotient_digit_a2,
            CALC_quotient_digit_a3;

// For |calc$rand_a.
logic [3:0] CALC_rand_a_a0;

// For |calc$rand_b.
logic [3:0] CALC_rand_b_a0;

// For |calc$remainder.
logic [3:0] CALC_remainder_a1,
            CALC_remainder_a2;

// For |calc$reset.
logic CALC_reset_n1,
      CALC_reset_a0;

// For |calc/result$quotient.
logic [15:0] CALC_Result_quotient_a3 [1:0],
             CALC_Result_quotient_a4 [1:0];


//
// Scope: |calc
//

// Clock signals.
logic clkF_CALC_calc_valid_a2 ;
logic clkF_CALC_calc_valid_a3 ;
logic clkF_CALC_calc_valid_a4 ;
logic clkF_CALC_calc_valid_a5 ;
logic clkF_CALC_last_iter_a4 ;
logic clkF_CALC_last_iter_a5 ;
logic clkP_CALC_calc_valid_a1 ;
logic clkP_CALC_calc_valid_a2 ;
logic clkP_CALC_calc_valid_a3 ;
logic clkP_CALC_calc_valid_a4 ;
logic clkP_CALC_calc_valid_a5 ;
logic clkP_CALC_calc_valid_a6 ;
logic clkP_CALC_calc_valid_a7 ;
logic clkP_CALC_last_iter_a2 ;
logic clkP_CALC_last_iter_a3 ;



   //
   // Scope: |calc
   //

      // Staging of $CycCnt.
      always_ff @(posedge clk) CALC_CycCnt_n1[15:0] <= CALC_CycCnt_n2[15:0];
      always_ff @(posedge clk) CALC_CycCnt_a0[15:0] <= CALC_CycCnt_n1[15:0];
      always_ff @(posedge clk) CALC_CycCnt_a1[15:0] <= CALC_CycCnt_a0[15:0];
      always_ff @(posedge clk) CALC_CycCnt_a2[15:0] <= CALC_CycCnt_a1[15:0];
      always_ff @(posedge clk) CALC_CycCnt_a3[15:0] <= CALC_CycCnt_a2[15:0];
      always_ff @(posedge clk) CALC_CycCnt_a4[15:0] <= CALC_CycCnt_a3[15:0];

      // Update state with next state or hold.
      assign CALC_Error1_a0 = !CALC_calc_valid_a1 ? CALC_Error1_a1 : w_CALC_Error1_a0;
      // Staging of $Error1.
      always_ff @(posedge clkF_CALC_calc_valid_a2) CALC_Error1_a1 <= CALC_Error1_a0;
      always_ff @(posedge clkF_CALC_calc_valid_a3) CALC_Error1_a2 <= CALC_Error1_a1;
      always_ff @(posedge clkF_CALC_calc_valid_a4) CALC_Error1_a3 <= CALC_Error1_a2;
      always_ff @(posedge clkF_CALC_calc_valid_a5) CALC_Error1_a4 <= CALC_Error1_a3;

      // Update state with next state or hold.
      assign CALC_Error2_a0 = !CALC_calc_valid_a1 ? CALC_Error2_a1 : w_CALC_Error2_a0;
      // Staging of $Error2.
      always_ff @(posedge clkF_CALC_calc_valid_a2) CALC_Error2_a1 <= CALC_Error2_a0;
      always_ff @(posedge clkF_CALC_calc_valid_a3) CALC_Error2_a2 <= CALC_Error2_a1;
      always_ff @(posedge clkF_CALC_calc_valid_a4) CALC_Error2_a3 <= CALC_Error2_a2;
      always_ff @(posedge clkF_CALC_calc_valid_a5) CALC_Error2_a4 <= CALC_Error2_a3;

      // Update state with next state or hold.
      assign CALC_Error3_a2 = !CALC_last_iter_a3 ? CALC_Error3_a3 : w_CALC_Error3_a2;
      // Staging of $Error3.
      always_ff @(posedge clkF_CALC_last_iter_a4) CALC_Error3_a3 <= CALC_Error3_a2;
      always_ff @(posedge clkF_CALC_last_iter_a5) CALC_Error3_a4 <= CALC_Error3_a3;

      // Staging of $aa.
      always_ff @(posedge clkP_CALC_calc_valid_a1) CALC_aa_a1[3:0] <= CALC_aa_a0[3:0];
      always_ff @(posedge clkP_CALC_calc_valid_a2) CALC_aa_a2[3:0] <= CALC_aa_a1[3:0];
      always_ff @(posedge clkP_CALC_calc_valid_a3) CALC_aa_a3[3:0] <= CALC_aa_a2[3:0];
      always_ff @(posedge clkP_CALC_calc_valid_a4) CALC_aa_a4[3:0] <= CALC_aa_a3[3:0];
      always_ff @(posedge clkP_CALC_calc_valid_a5) CALC_aa_a5[3:0] <= CALC_aa_a4[3:0];
      always_ff @(posedge clkP_CALC_calc_valid_a6) CALC_aa_a6[3:0] <= CALC_aa_a5[3:0];
      always_ff @(posedge clkP_CALC_calc_valid_a7) CALC_aa_a7[3:0] <= CALC_aa_a6[3:0];

      // Staging of $aa_in.
      always_ff @(posedge clkP_CALC_calc_valid_a1) CALC_aa_in_a1[3:0] <= CALC_aa_in_a0[3:0];

      // Staging of $bb.
      always_ff @(posedge clkP_CALC_calc_valid_a1) CALC_bb_a1[3:0] <= CALC_bb_a0[3:0];
      always_ff @(posedge clkP_CALC_calc_valid_a2) CALC_bb_a2[3:0] <= CALC_bb_a1[3:0];
      always_ff @(posedge clkP_CALC_calc_valid_a3) CALC_bb_a3[3:0] <= CALC_bb_a2[3:0];
      always_ff @(posedge clkP_CALC_calc_valid_a4) CALC_bb_a4[3:0] <= CALC_bb_a3[3:0];
      always_ff @(posedge clkP_CALC_calc_valid_a5) CALC_bb_a5[3:0] <= CALC_bb_a4[3:0];
      always_ff @(posedge clkP_CALC_calc_valid_a6) CALC_bb_a6[3:0] <= CALC_bb_a5[3:0];
      always_ff @(posedge clkP_CALC_calc_valid_a7) CALC_bb_a7[3:0] <= CALC_bb_a6[3:0];

      // Staging of $bb_in.
      always_ff @(posedge clkP_CALC_calc_valid_a1) CALC_bb_in_a1[3:0] <= CALC_bb_in_a0[3:0];

      // Staging of $calc_valid.
      always_ff @(posedge clk) CALC_calc_valid_a1 <= CALC_calc_valid_a0;
      always_ff @(posedge clk) CALC_calc_valid_a2 <= CALC_calc_valid_a1;
      always_ff @(posedge clk) CALC_calc_valid_a3 <= CALC_calc_valid_a2;
      always_ff @(posedge clk) CALC_calc_valid_a4 <= CALC_calc_valid_a3;
      always_ff @(posedge clk) CALC_calc_valid_a5 <= CALC_calc_valid_a4;
      always_ff @(posedge clk) CALC_calc_valid_a6 <= CALC_calc_valid_a5;

      // Staging of $full_quotient.
      always_ff @(posedge clkP_CALC_last_iter_a2) CALC_full_quotient_a2[19:0] <= CALC_full_quotient_a1[19:0];
      always_ff @(posedge clkP_CALC_last_iter_a3) CALC_full_quotient_a3[19:0] <= CALC_full_quotient_a2[19:0];

      // Staging of $in_valid.
      always_ff @(posedge clk) CALC_in_valid_a1 <= CALC_in_valid_a0;

      // Staging of $iteration.
      always_ff @(posedge clk) CALC_iteration_a1[1:0] <= CALC_iteration_a0[1:0];
      always_ff @(posedge clk) CALC_iteration_a2[1:0] <= CALC_iteration_a1[1:0];

      // Staging of $last_iter.
      always_ff @(posedge clk) CALC_last_iter_a1 <= CALC_last_iter_a0;
      always_ff @(posedge clk) CALC_last_iter_a2 <= CALC_last_iter_a1;
      always_ff @(posedge clk) CALC_last_iter_a3 <= CALC_last_iter_a2;
      always_ff @(posedge clk) CALC_last_iter_a4 <= CALC_last_iter_a3;

      // Staging of $next_remainder.
      always_ff @(posedge clkP_CALC_calc_valid_a3) CALC_next_remainder_a3[3:0] <= CALC_next_remainder_a2[3:0];

      // Staging of $odd.
      always_ff @(posedge clk) CALC_odd_a1 <= CALC_odd_a0;
      always_ff @(posedge clk) CALC_odd_a2 <= CALC_odd_a1;
      always_ff @(posedge clk) CALC_odd_a3 <= CALC_odd_a2;

      // Staging of $orig_aa.
      always_ff @(posedge clk) CALC_orig_aa_a2[3:0] <= CALC_orig_aa_a1[3:0];
      always_ff @(posedge clk) CALC_orig_aa_a3[3:0] <= CALC_orig_aa_a2[3:0];

      // Staging of $orig_bb.
      always_ff @(posedge clk) CALC_orig_bb_a2[3:0] <= CALC_orig_bb_a1[3:0];
      always_ff @(posedge clk) CALC_orig_bb_a3[3:0] <= CALC_orig_bb_a2[3:0];

      // Staging of $quotient_digit.
      always_ff @(posedge clkP_CALC_calc_valid_a2) CALC_quotient_digit_a2[3:0] <= CALC_quotient_digit_a1[3:0];
      always_ff @(posedge clkP_CALC_calc_valid_a3) CALC_quotient_digit_a3[3:0] <= CALC_quotient_digit_a2[3:0];

      // Staging of $remainder.
      always_ff @(posedge clkP_CALC_calc_valid_a2) CALC_remainder_a2[3:0] <= CALC_remainder_a1[3:0];

      // Staging of $reset.
      always_ff @(posedge clk) CALC_reset_a0 <= CALC_reset_n1;


      //
      // Scope: /result[1:0]
      //
      for (result = 0; result <= 1; result++) begin : L1gen_CALC_Result
         // Staging of $quotient.
         always_ff @(posedge clkP_CALC_calc_valid_a4) CALC_Result_quotient_a4[result][15:0] <= CALC_Result_quotient_a3[result][15:0];

      end




//
// Gated clocks.
//



   //
   // Scope: |calc
   //

      clk_gate gen_clkF_CALC_calc_valid_a2(clkF_CALC_calc_valid_a2, clk, CALC_calc_valid_a1, 1'b1, 1'b0);
      clk_gate gen_clkF_CALC_calc_valid_a3(clkF_CALC_calc_valid_a3, clk, CALC_calc_valid_a2, 1'b1, 1'b0);
      clk_gate gen_clkF_CALC_calc_valid_a4(clkF_CALC_calc_valid_a4, clk, CALC_calc_valid_a3, 1'b1, 1'b0);
      clk_gate gen_clkF_CALC_calc_valid_a5(clkF_CALC_calc_valid_a5, clk, CALC_calc_valid_a4, 1'b1, 1'b0);
      clk_gate gen_clkF_CALC_last_iter_a4(clkF_CALC_last_iter_a4, clk, CALC_last_iter_a3, 1'b1, 1'b0);
      clk_gate gen_clkF_CALC_last_iter_a5(clkF_CALC_last_iter_a5, clk, CALC_last_iter_a4, 1'b1, 1'b0);
      clk_gate gen_clkP_CALC_calc_valid_a1(clkP_CALC_calc_valid_a1, clk, 1'b1, CALC_calc_valid_a0, 1'b0);
      clk_gate gen_clkP_CALC_calc_valid_a2(clkP_CALC_calc_valid_a2, clk, 1'b1, CALC_calc_valid_a1, 1'b0);
      clk_gate gen_clkP_CALC_calc_valid_a3(clkP_CALC_calc_valid_a3, clk, 1'b1, CALC_calc_valid_a2, 1'b0);
      clk_gate gen_clkP_CALC_calc_valid_a4(clkP_CALC_calc_valid_a4, clk, 1'b1, CALC_calc_valid_a3, 1'b0);
      clk_gate gen_clkP_CALC_calc_valid_a5(clkP_CALC_calc_valid_a5, clk, 1'b1, CALC_calc_valid_a4, 1'b0);
      clk_gate gen_clkP_CALC_calc_valid_a6(clkP_CALC_calc_valid_a6, clk, 1'b1, CALC_calc_valid_a5, 1'b0);
      clk_gate gen_clkP_CALC_calc_valid_a7(clkP_CALC_calc_valid_a7, clk, 1'b1, CALC_calc_valid_a6, 1'b0);
      clk_gate gen_clkP_CALC_last_iter_a2(clkP_CALC_last_iter_a2, clk, 1'b1, CALC_last_iter_a1, 1'b0);
      clk_gate gen_clkP_CALC_last_iter_a3(clkP_CALC_last_iter_a3, clk, 1'b1, CALC_last_iter_a2, 1'b0);





//
// Debug Signals
//

   if (1) begin : DEBUG_SIGS


      //
      // Scope: |calc
      //
      if (1) begin : \|calc 
         logic [15:0] \@-2$CycCnt ;
         assign \@-2$CycCnt = CALC_CycCnt_n2;
         logic  \@0$Error1 ;
         assign \@0$Error1 = CALC_Error1_a0;
         logic  \@0$Error2 ;
         assign \@0$Error2 = CALC_Error2_a0;
         logic  \@2$Error3 ;
         assign \@2$Error3 = CALC_Error3_a2;
         logic [3:0] \@0$aa ;
         assign \@0$aa = CALC_aa_a0;
         logic [3:0] \@0$aa_in ;
         assign \@0$aa_in = CALC_aa_in_a0;
         logic [3:0] \@0$bb ;
         assign \@0$bb = CALC_bb_a0;
         logic [3:0] \@0$bb_in ;
         assign \@0$bb_in = CALC_bb_in_a0;
         logic  \@0$calc_valid ;
         assign \@0$calc_valid = CALC_calc_valid_a0;
         logic [19:0] \@1$full_quotient ;
         assign \@1$full_quotient = CALC_full_quotient_a1;
         logic  \@0$in_valid ;
         assign \@0$in_valid = CALC_in_valid_a0;
         logic [1:0] \@0$iteration ;
         assign \@0$iteration = CALC_iteration_a0;
         logic  \@0$last_iter ;
         assign \@0$last_iter = CALC_last_iter_a0;
         logic [7:0] \@2$next_remainder ;
         assign \@2$next_remainder = CALC_next_remainder_a2;
         logic  \@0$odd ;
         assign \@0$odd = CALC_odd_a0;
         logic [3:0] \@1$orig_aa ;
         assign \@1$orig_aa = CALC_orig_aa_a1;
         logic [3:0] \@1$orig_bb ;
         assign \@1$orig_bb = CALC_orig_bb_a1;
         logic [15:0] \@3$quotient ;
         assign \@3$quotient = CALC_quotient_a3;
         logic [7:0] \@1$quotient_digit ;
         assign \@1$quotient_digit = CALC_quotient_digit_a1;
         logic [3:0] \@0$rand_a ;
         assign \@0$rand_a = CALC_rand_a_a0;
         logic [3:0] \@0$rand_b ;
         assign \@0$rand_b = CALC_rand_b_a0;
         logic [3:0] \@1$remainder ;
         assign \@1$remainder = CALC_remainder_a1;
         logic  \@-1$reset ;
         assign \@-1$reset = CALC_reset_n1;

         //
         // Scope: /result[1:0]
         //
         for (result = 0; result <= 1; result++) begin : \/result 
            logic [15:0] \@3$quotient ;
            assign \@3$quotient = CALC_Result_quotient_a3[result];
         end
      end


   end


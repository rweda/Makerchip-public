.mc-auto-pane-contents.mc-markdown
  h1
    | Tutorials
  | Unlike other hardware description languages, you can learn TL-Verilog relatively quickly. These written tutorials will step you through each new concept and construct in TL-Verilog.
  table.mc-table2
    tr
      th
        | 
      th
        | Duration
      th
        | Description
    tr
      td
        button.btn.mc-tutorial-btn2(type="button" onclick="ide.openStaticPane(\"#{appConfig.product} Tutorial\")")
          | #{appConfig.product} Tutorial
      td
        | ~20 min.
      td
        | Introduction to the #{appConfig.product} IDE.
    tr
      td
        button.btn.mc-tutorial-btn2(type="button" onclick="ide.openStaticPane(\"Tutorial-Combo\")")
          | Combo-Logic Tutorial
      td
        | ~10 min.
      td
        | Create and simulate logic gates, adders, multiplexers, etc. in TL-Verilog.
    tr
      td
        button.btn.mc-tutorial-btn2(type="button" onclick="ide.openStaticPane(\"Tutorial-Seq\")")
          | Seq-Logic Tutorial
      td
        | ~10 min.
      td
        | Sequential logic requires reset to initialize state and a clock to sequence state updates.
    tr
      td
        button.btn.mc-tutorial-btn2(type="button" onclick="ide.openStaticPane(\"Tutorial-Pipes\")")
          | Pipeline Tutorial
      td
        | ~15 min.
      td
        | Pipelines distribute deep computations over multiple clock cycles.
    tr
      td
        button.btn.mc-tutorial-btn2(type="button" onclick="ide.openStaticPane(\"Tutorial-Valid\")")
          | Validity Tutorial
      td
        | ~25 min.
      td
        | TL-Verilog introduces the concept of "validity" so you know when your circuit is doing something meaningful.
    tr
      td
        button.btn.mc-tutorial-btn2(type="button" onclick="ide.openStaticPane(\"Tutorial-Align\")")
          | Alignment Tutorial
      td
        | ~40 min.
      td
        | Managing interacting pipelined logic can get really complicated really quickly. TL-Verilog can help.
    tr
      td
        button.btn.mc-tutorial-btn2(type="button" onclick="ide.openStaticPane(\"Tutorial-Hier\")")
          | Hierarchy Tutorial
      td
        | ~20 min.
      td
        | Verilog gives us several forms of hierarchy. TL-Verilog logic needs only one.
    tr
      td
        button.btn.mc-tutorial-btn2(type="button" onclick="ide.openStaticPane(\"Tutorial-State\")")
          | State Tutorial
      td
        | ~15 min.
      td
        | Not all flip-flops hold architectural state. TL-Verilog makes this distinction explicit.
    tr
      td
        button.btn.mc-tutorial-btn2(type="button" onclick="ide.openStaticPane(\"Tutorial-TLV-Macros\")")
          | TLV Macros Tutorial
      td
        | ~25 min.
      td
        | Modularity and reuse are essential to design productivity.
    tr
      td
        button.btn.mc-tutorial-btn2(type="button" onclick="ide.openStaticPane(\"Tutorial-Flow\")")
          | Flow Tutorial
      td
        | ~30 min.
      td
        | Learn where TL-Verilog gets it's name and how to achieve >10x code reduction vs. Verilog.
